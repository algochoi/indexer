// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
