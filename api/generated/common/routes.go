// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"OjmlwAAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
