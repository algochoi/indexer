// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WVfxLwa4ztezm99v/n8AAAD//201VKT9wwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
