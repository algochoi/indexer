// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/w8AAP//9BpRjZLCAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
