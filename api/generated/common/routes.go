// Package common provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package common

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns 200 if healthy.
	// (GET /health)
	MakeHealthCheck(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// MakeHealthCheck converts echo context to params.
func (w *ServerInterfaceWrapper) MakeHealthCheck(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeHealthCheck(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/health", wrapper.MakeHealthCheck, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctrLgX0HN3qrY2aHkOI/aqCp1y7HjjevYictycnav5d1gyJ4ZRByABwA1M/Hq",
	"v2+hGyBBEpyHJMs+Vflka4hHN7rRaPQLHya5WlVKgrRmcvZhUnHNV2BB4188z1UtbSYK91cBJteiskLJ",
	"yVn4xozVQi4m04lwv1bcLifTieQraNu4/tOJhn/VQkMxObO6hunE5EtYcTew3VautR/p+no64UWhwZjh",
	"rL/KcsuEzMu6AGY1l4bn7pNha2GXzC6FYb4zE5IpCUzNmV12GrO5gLIwJwHof9WgtxHUfvJxEKeTTcbL",
	"hdJcFtlc6RW3k7PJE9/veu9nP0OmVQlDHJ+q1UxICBhBg1BDHGYVK2COjZbcMgedwzM0tIoZ4DpfsrnS",
	"e9AkIGJcQdarydm7iQFZgEbK5SCu8L9zDfAXZJbrBdjJ+2mKdnMLOrNilUDthaecBlOX1jBsizguxBVI",
	"5nqdsFe1sWwGjEv25vlT9vXXX3/PaBktFJ7hRrFqZ49xaqhQcAvh8yFEffP8Kc5/7hE8tBWvqlLk3OGd",
	"3D5P2u/sxbMxZLqDJBhSSAsL0LTwxkB6rz5xX3ZMEzrum6C2y8yxzThh/Y43LFdyLha1hsJxY22A9qap",
	"QBZCLtglbEdJ2Ezz8XbgDOZKw4FcSo3vlE3j+T8pn87UJiOYBkzDZmrD3DcnSReKlxnXC8SQfQEyV46O",
	"Z1e8rOGLE/ZcaSakNVNPa/ANhbRnXz3++hvfRPM1m20tDNrNvvvm7MkPP/hmlRbS8lkJfhkHzY3VZ0so",
	"S+U7eGE2HNd9OPtf//u/Tk5OvhgjBv5z+AGVXtr/+euTl1yPrnz0Oa+1Bplvs4UGjtJqyeVw/d947jNL",
	"VZcFW/IrZDW+wmPX92WuL20tpMQJeyVyrZ6UC2UY90xbwJzXpWVhYlbL0h0TbjS/9ZkwrNLqShRQTB29",
	"10uRL1nO/WJiO7YWZek4vjZQjC1mGrs9kqXp5OC60XogQp/vYrR47VkJ2KDsGaL/08ZL2KIQ7ideMmFh",
	"ZZip8yXjxkO1VGVBGyY6PFipcl6yglvOjFVOKM+V9toSSeyp798qgCxHAhZstu23lEVn9P193PrApiqV",
	"w2zOSwPp9QrYx4uEWMZ6CS/LiT/tnJLmp8yaH3hVmQwxzozlFuI2VeVaSCUhobw0P3Ct+db9bezWaWgo",
	"lictdbK8VAYyq/Yob0EfwwWL1K14xY5S5djbJTCc3H0gNRY5Wzo5U5ZbZj0BHEOwoLhNmZizrarZGrdO",
	"KS6xv8fG8fSKOeIjyTpappOEY8w9WIwEa8+UKoFLZG2vtmeOfuMKRBn4mpo7XQEnKBrdYsoKKAGRbJkQ",
	"fzVWqy0i71hhylTliK5qO9wcsvDD0uf+XkHGGb0hxJjsQboUK2GH6L7iG7GqV0zWqxloR/CgbFjFNNha",
	"SyS2BpYjzWadnV/xBRgGThcRdL3BeZzgksoyDTxfjkslgmmPIFrxTaZVLYsDtHjLlI61JFNBLuYCCtaM",
	"MgZLO80+eIQ8Dp72bhGBEwYZBaeZZQ84EjYJsrrt6b4ggSKqnrDf/NmBX626BNkcMSQsgVUaroSqTdNp",
	"TF1xU+++P0tlIas0zMVmCOS5Xw4nIaiNP+BWXqHNlbRcSCjc2YdAKwskbUZhiiY8VnOacQPffTOmOLVf",
	"NVzCNil0+wxA6DRmgqX7Qn13Y9HMsGdTH8iHdMbG/LeT9w7iO2yUkdhI6EjuqxcqaZNMp/8BOm88NxkE",
	"slsZZ2iMcLyNLUVvpo93DzRikdGIg10iFm/dWTwXJZ7Tf7rNEShbG3cudWkbTm4jFpLbWsPZhfzS/cUy",
	"dm65LLgu3C8r+ulVXVpxLhbup5J+eqkWIj8Xi7FFCbAmjTXYbUX/uPHSxhm7adBNTRE+p2aouGt4CVsN",
	"bg6ez/GfzRwZic/1X6R7lWMzpywTL5W6rKt4JfOOpW62ZS+ejXEJDrlLEKLQMJWSBpBdn5AG8cb/5n5y",
	"sg4kivJICTj90yi8grRjV1pVoK2A2DLq/vsfGuaTs8l/O20tqafUzZz6Cdtbnx07w2jncutlF8ksL81I",
	"C1hVtaUzPSUWmn38roGtP2dLFjX7E3JLC9QF4wGsKrt96AD2sJu7Wy3TUecPXLe+Sv4R15FO9QxP5+HI",
	"vxl/bar4QkhEfMrWS5BsxS+dOOBS2SVo5mgBxobzneQeHfmNSdcrCV7TPpmkdkyCpubWRG2p9tLpueeo",
	"594FiXuXriNonQLpb8o3lB8s7F2ywOKOaL/T1n1x8Y5XlSg2FxfvO1ctIQvYpOnxUYldqkVWcMtvxqOL",
	"Z65rgkE/Zx7q+hHuioHulnmOoML9nqh3tVx3vNluJGP/lqyJXXF7oWoM2B95yWV+J8fpzA91MIVfCSkQ",
	"iJ/JxvU3mQOZm6W8CxL71b2TjUz26oO38N/ETe3hxgtwa9LeFUkPIuQ93whxyrtYpE/F+H9z/N1y/I+l",
	"yi9vRMtdpMJR982sNnc/r9qkZv1RbZiQZPbzms+PanM357Mb52AW/lFtnnnIlB6ycv/AwrEPIeiPPkDD",
	"oMdQxncrN8tPWit9B8iGq1IPnulkBcbwBaR9EDFKoeEhSAWAcYeBQwEttT8DL+3y6RI+At9GY+/h3ret",
	"bfIOFvajSrDIjLoP/wirPXef7rBHCp1oGvO5r97nI/87S364zOnQdI/E2UFjcxyRr4M5Pra3J2LLfPBw",
	"JJ0dpbiPryM32YW8kM9gLiR6vc8upJNDpzNuRG5OawPa37dOFoqdMT/kM275hZxM+zrHmM8K43k8NFU9",
	"K0XOLmGbogIFGqWtW+VCXVy8Z1ZZXkY+/Sj8yHtSW9v8kOVogsxxhqpt5iMlMw1rrosE6Kbx4+LIFAe1",
	"a9Yp82OTu9lHYvrx09tgEEszYtwre6Y9kwg5ErIbE+To+4uy3kHL14z4i9UGDPtjxat3Qtr3LLuoHz36",
	"GtiTqmrtw3+0AUwOaPQQ3amxGRFHemawsZpnGHKRRN8Cr5D6S2CmXuFZXJYMu3XjpLRaaL7y0Rv9CKwd",
	"BCA4DjvLIgwRuXPqdT2N9O4hBd0nJCG2YUsohzFcx9IrurDemFx7Lr07IpIvLt5hsHGgTBOLteBCmnAq",
	"GLGQbhP4oMIZsNxpAVCcsBdzhlJt2unuswm8xGxEhzAUB8jeOhwxyIDlXGJ8YFVgRJaQjMtt37tpwNrg",
	"S34Dl7B9G8UoHOnr9gFNfM+RWNRuuOZYbCnM1tywlUI/dw7SllsfI5VgzTQwtZCWgjU6EXcjQgN3TRQK",
	"5zZOLEJGggmjyDBeVWxRqpmXNA2LnjU8GvqMC5XXDgBzBwIleUftBiemF4LrxELQRhyLpzweUTferbbh",
	"TvRuzHJzoQ3G3wH3ZwSPt8gNOM8HBw5B+ecSUCtTGoPkuixlwpZOMX0T+zOdVFxbkYvqMIcFjf6608cN",
	"su9oTx7mat4/swdHavIIocbZjJv08Q3ui+PA2lDgqMMxCLowE2nLiMEJw0Afv1VnJcaSNokfRGOuMcg1",
	"oE2JEGOgpfcFaNnqVAGM7orEytuSmxDvikHbQUQcpOaMMO9btwDIwG7fRNwb663CzVvCFR9b//EYoxey",
	"cLIDTDf2t4kgCsfKMAQ7hOpRgluINArhRSGmyP3ruL0uSybmrJaXUq2dcnxM1NB04jS/Ok0kJVHzc3tu",
	"QctBjQP7eIC/MBHZHFS/zuelkMAyJpo1sLgGFF+vckFhzO3+9HOAuxh8yRwPugEOHiHF3BHYlVIlDcx+",
	"UfGOlYtjgJQgUMbwMDYKm+hvSN/wUMFDXY9iloVMc2Me5ILTMDuHJQKGSREzAEmhz0zIKXP3vCteOm3F",
	"KlJemkHSKQIPOqq2V/PMwzE9Pm19IIzwFDsKJzr3boJNrCwGoNOa7A6Id+stKRIYXC/SItq12pEIsXfq",
	"EV1hbK0eIOK3AKBvYW6iLv2Vd+/VdHiitaJ92sa1khhJc/sYxyTpMrJiQ0tFE8X2un9sJ+0RnVaMmsz8",
	"/TpSz1Ii2e2KXEkD0tSYPWRVrsqTgSHCQAmo2WQdTSK7hG36DgMoYM9Dt8hIwR6IubtSPIxUFw0LYSx0",
	"MnyaoOM2pnqLWTEVtxa0m+j/PPjPs3dPsv/i2V+Psu//++n7D99cP/xy8OPj6x9++H/dn76+/uHhf/7H",
	"ZOTUgKzSSs3HsbOVnjv83ijVSGXsyLBjB817x+BKWchQQc2ueDkS2eQaPTd4eX6OumxSYegQm1GCmhgx",
	"PeK0l7DNClHWaX718/7jmZv2l8beZOrZJWxRLQSeL9mM23yJemNnetdmx9Ql34vwS0L4Jb8zfA/bDa6p",
	"m1g7dunO8W+yL3qydpc4SDBgijmGVBtd0h0CEo/6Z1CSp2c8V502Z+Eanuyysg42UxHG3nVhiqAYP5Vo",
	"pCQu3ViycSww8BCTwISNMt7MAKNDL7ho/afzIJpmzZsb/Ee/yMbYxZdZP0r6Nus/3gK94fCHondXkaJI",
	"vWPsNKQpDRgMN44fbA9zRabjYd6IU5KD+Zt2S3RVoLTQjqd2uI3axMTDCBNUEJ8nqermKO1N89EYEBJX",
	"CcI9xYtsrtUKd95QKY2YU4zcyDss2B45vVl95ZMhvzjhienhez1owMt/wPZ31xap6noHxfTQLdMaKMId",
	"xl9bbkea2/kCUpzvR9zL+RT9PMb2WCODDLId396RO6BUi7S9oVyg3qEWbXZdzA4zcHc/2EBe2zaxsmdP",
	"bEye96tN9m2n6YSoyG1LBVt26w+4UH6sPaR73cjJj0k5XlVaXfEy886uMRmv1ZWX8dg8+MbuWR1Lb7O3",
	"Pz15+dqDj24V4DprrjOjWGG76t8GK6eXKD0iYkP1gSW3jSWhf/57Z5cwHQfZGpPWezdmp2l55iIB3To/",
	"o93rHWbzoJcf6f7yflpCcYe/FqrGXdva2clb2/XQ8isuymDgDtCmDxVCrvWRH32uxAPc2tMbOeyzOz0p",
	"Brs7vTv2SKJ4hh3Z6SuqkWCY8lnozT0XL7doLUcGXfGt4xsyTw5FkqxXmdt0mSlFnnaByJlxLCHJe+8a",
	"M2w8ck12I7qzOD1WLaKxXDNzgNGtB2Q0R3IxQ6Dx2NrNlA8vqqX4Vw1MFCCt+6RxL/a2p9uNof7Nja9A",
	"CR8f1cm5x0sQTnjM9cdXDLkVcs0oN7kEuXvNcFJPNY9PQ7vb3H9aG/FQ/0Mgdl9+4kCMAbjPGktp4KLG",
	"7s5lx2d9RDxXPONAy9gRi+U3nxcVtRTeC3AD6uyvqBcuWr6yTFpcHHWPigvV3Or2ZLK5Vn9B2nqIRtf1",
	"cPpoYuqdHvzgW1Bv34zchkSvetUNSNWU+rktSM3t+dZA9c/OxpnSlltsiTS66cbU9tjp040EHBHsuP+i",
	"eBO8oAZvKJe04Z5i2cbOjSm9beMQ0VMav922HuahXYOvZzy/TGvPDqYnbZRVx29rFQudmyJOXSqdsChg",
	"q2nr6yFVoFfCdo+B9mJ2U02Ypj1YB25VXuSqWNn1JdVKoxLD1HLNpQ1VrbxA870NkOfJ9VorbSwWqUti",
	"WUAuVrxMq8QFrv7bjpJViIWgelS1gaiakh+IVUpIS1xUCFOVfEtxbO3SvJizR9NIqnlqFOJKGDErAVt8",
	"RS1m3KCy0pquQheHHki7NNj88QHNl7UsNBR26Qt9GcWa2wpafprwiRnYNYBkj7DdV9+zBxg4YsQVPHSr",
	"6FXQydlX32MFKvrjUVrIY13BXUK3QKkbhH6ajzFyhsZwx6cfNS2FqRjvuHzfsZuo6yF7CVv6I2H/Xlpx",
	"yReQDsdc7YGJ+iI10YvVWxdZUK08VLaYsOn5wXInn7IlN8u0fkBgsFytVsKufCCBUSvHT201H5o0DEeF",
	"90jCN3CFjxilU7G0Xe9+bUzpSq4Oa4yl+oWvoLusU8YNM7WDubWXeYF4wnxBq4IpWW4jiyauDVWGpcgw",
	"sjvPo7qttZ1n/4PlS6557sTfyRi42ey7b4Yg/4hVvxiWmYWC5joc8Htfdw0G9FV66fUI2wdVy/dlD6SS",
	"2cpJlOKhl/LdXTkaOJSOSg8SvZ+UsHvoQ/UtN0o2ym51h914JKlvxXhyx4C3ZMUGn6P48WjM7p0za51m",
	"D147Cv325qXXMlZKQ9fwOwuJIh19RYPVAq4wQD5NJDfmLWmhy4OocBvoP63bP6ickVoW9nLqIkB5tcPl",
	"cD/HaI9dsZW6vASohFyczlwfUtVp1L6SvgAJRpjxA3SxdJzjPrsjL7KI4NBsBqWSC3P/nB4AH/ErLwBl",
	"0otn+6AeDBzqcmbYdHxhXDs3xetQx5OGdu0/xYnURFbvzdh+49uOB0K7Y4xSaZ76xBeK+ul6YAnfNUc7",
	"OciC1DoUf0su5Eh0NEAxEvkGOOO50lZQ7AnAJ4hjs2IFxvJVlT5m0XBMOxF3tQO06eJuIwZyJQvDjJA5",
	"MKiUWe7L1x3JM9tInKwUho6cuMJmrjSVOkSdwqpeLuWhmR47s0a7MGZaKTsGKCofcbqvUpbx2i5B2iaS",
	"GrDodB8TygXBGwcdKCSy2Csn40ORSF6W2ykT9gsaR/vwQc5WoC9LYFYDsPVSGWAl8Cto67/jaF8Y9nYj",
	"CoPV3UvYiFwtNK+WImdKF6DpUQHXHG9B1MnP9+iE+Sw4Hwn+diMRvUIBXZFiPAnNENDf+DJijKd0gPZ/",
	"xrLcBsorMCfs7VoREKbNHDZOCen0mNWWMmgKMZ8D7lNEBy9P2K/9EMGElewx2LoZ1uP0CXbbRmaoH49c",
	"Ii1ZKjbyKTViPu2k6yDqbY0V3VgDQ5VQLEBPyZCKyy5W0GaKO91NadsabOZA2RhOsglptSrqHCg/+bzD",
	"jxFYYgBSU/w58vAjD4WHBFo4g7ElyFR3IUcF9xGpWVJ1MUTawRVoipZvB3pAQieCy1iuMTQCIyU8qlA8",
	"TAvnulpoXsBhfk0Ugr9RjyavNoxwpY4b4HfXvq82dXSTzomfPqWj2HN3ysSyPCXLRlWvN2NpSs+pAr+G",
	"kjJFsHg7tp0OFKs5QGaETFs/5wAo23meQ+XYOX6tCsAJKlJiUVRgYms4Wx2FpRVXQDksO5SBLOdlXpcU",
	"D7rjpF/nvNRdN0oJc6scg8UvarQmQeHmmmE8KlU9p/m0E4BRD6zocQV661vQ7SkUGXebQ/d8/8NcsayE",
	"K0jfaYBTytjPas1WXG4bWrgpWjCmUWJJAznpKuhYJmr/5i92Efi0mTzX7QbSkWJkcYuYzhVooQqRMyH/",
	"BL+bG7EUOIZeK1DSClnjIw8aWrjpnGCY/dbPcBtygB7L4XcfusHkEtYdaheRPtcNvTaWXwKBHfL0/NF4",
	"KE01GFHUI6ZMzfMuZMcxo9+8b7iFU92Q1twRX/YkVLPJd226Pi/32KZHreEqjcqpjvA9RFjxJlOFeUGd",
	"iEb1xUFCy5G7j7IqWJxCcnwz9hVo041zjGyAsNkztmvRGZ9KpmhF9oXjZ8lCGIsZnW9L4rjluaB8UXYr",
	"9gcfR5FYwZF6Mg0AZi1svsxGUjtcW2pBqTG9m9ZwSlIhcBfCfA65PQQGzBGgRztGoaDPDopnwAtMuGzT",
	"PSjRow/Kg18Uc0ObSK+RRqAW2qo1OMrDI0qvNhyyj/l/Vwfy/pXC/6GL9IBtEBQZT/u02ZPaeOZps3s5",
	"24LBVWmiVqM9UinDy7SHJ0xaQMm3u6bEBt1JG8U2OLnozOHuDHMHCkXJpsOPo6n9Pts1uWvSR7jZnsNd",
	"ET8KMKCkSkTD/Kg2zREIPpzquArU/ThhUQSVfKY2TK3lSGzNqIHbfXAohyfypmzWsU3ef65aiGgf5ky5",
	"LwFW/KMP7Cc2hg6qU/v3+Ail92kuierpJfmlaL5HeZwUvIwLESohcf9U3CdmqZ5lO7DV50iYFEF+uuLl",
	"SPLYG6g0GLdtGWdvf3ry0rvgx1LI8tGMR259qQHL2Wh1kOspLlT6ZKcoT/zekn3ofhiL7KTATvd50Ptm",
	"EUFjVfSiBQ2BwkOA/hHyWFjFhY8vafPnhivrcyrHJceuq3lL4D4SPlNxdK/+zM0yXf0CnZO+5AW6E+a1",
	"pBtvE/OD8TZB5VHzQd0LhoUvlvzbrx7/38fffhf+fPztd3GRi+b7ZDrxX1NlLuIqkInXUJf4mepDsfCs",
	"zHCZR4tlFrOsCShPvSs1nfhil3GFv71ZJMJkK7HQqNWkRx0v0hmZ+xNZuaRNJ1449JrLuLrd45AO4j2I",
	"W/BaW02YOcVNgzLnCUIZsapKiuLwQw2qQxyVudoGm3782OW7Dvz86KGbcOMIgruP2LwpLPvrX+yO0/xV",
	"PlWrqoTxk6ui+Bt66JNUc6z4Ez3pGGy5Ks9r3Rr5+5GYv/NS0FtjBqv+SKUqLPNTWSHdfzAJVNWW/g9c",
	"u/9QDbru/4irIjnphpogXbDuRhgo5HhM3J2gIIuE75uSojdMJD/IOzU8FRMScWd2SUcbQcqU5FNrM2bc",
	"rsQvC/wSJ+YwAgSjwUz4y7ACLOiVuxwv1Zqt6nyJuSh8ASE1BQ809Mz0JuqMHqJ1uylWPrrBVDyngSgC",
	"suR6AZr5oETmXzloDsgVF71HHPtxR2gr4ylNYV/CzPDxUtTrorSZRF5OAOMStqektuDvNxAc49k3I4Bh",
	"Ds5HBOlWqTxxNtgefr3saHxUULJzB2nAv0PNz8Hn99qRmt8wz+1Q9BAP3A61gSGeh3uz47VNiIoWt0Ov",
	"LcPFHb9t2Nkht420buy643WHFgSrNTIElf3x1R9Mw9y/Hf3llzjBl19OfdM/Hnc/O8b78su0iee+Ljq0",
	"Rn4MP2+SY7oly/sva6NAM1j6yj99navVSkm0ZJdlL4xAFgwDKw2+hS0ZyCsoVQXJ1rTAEdExgU7Doi45",
	"uc+FlKA7nQ7JjDBiIaGwG0khV+f459uNTLWNj3psHS1HqqR1dDu/Wa33Xu1SykvJMQPkpiO2OSTtiBRr",
	"fpsRn1OgezMiDjUHfZsx3/oxDigjvJCaEoYp00OEuEdU0ojCveduQyxkKC8cMjqaEBH4V81LHwIjMeDk",
	"LWY15JcgqXJwbZp68QykqbWPOHGw4ngOFD+Mig940za5aQ3hbFddTo3euMbR5+NcMUOHujrVo3DEUbur",
	"3rn2Qi6yHcl8OWbz+YYhWxtN6DtLxLrBHRPqFRQHVumIHe6YsRr6jwzflqNrTWTpXM7ouW05rGnDHrx4",
	"9pCJ/vMdcdZs9HryfrTjiniHQUTB0wNY+rm7x0AxBxiLcugFhrE5jDjM9tVdm1+1JdewVd8ztRfKAyNd",
	"f+YGa6j55j4i5zMNb+0A6Z9OHg4V1xo4ui7XdLLQqk5HQy6o/kXfmu0uBqh0UYweGeROH3/7HSvEAow9",
	"Yf/EZEQ6fIfVVrvUZKKt4topFs0QsCbBnfQhH4gVzbn0BB0E3AkfkIXD3D+Fb1IOZjpBvSSzm1TQ6IuB",
	"zsIqH72GudmRvOl4A+8iVFRIqzkJ30zN58l6Bb/i760pSQeZrGFI9QOkMj1OfkOt4B/0svn1dLKnAGJ5",
	"1dQ+vJngKWGsFHe5SWyfrx9n7Q46YS9dbwZyrrS7aa9q63QA2GDeItk6O1oqJvPZ9lkCzOOTf4FWaEiQ",
	"TMkcBmegiBYbg894jvq88RGUDoamMEGT5vLgHLWZKQH5kO6pw63GamkFqT9uGX+PVrFyB48D+p9LUSa4",
	"oFLuu4nhmDKpGD24E7ekUOE2KZVg9okgHUa6320eF2cp0nYyxwkFFbpqa5q1Vop8yWX7gsj+ClhDnjzm",
	"Efau7O9v87us1LUDzk9bqkuqkag56euRugsKpoc2FrX7Bbji2xVIe0PJ95p6U0AeVtDXu28AeuQGEHrv",
	"e4/gEraZVemx3cemPEFz1ULbKUnbCMfpyL2nCT0Kb6+0uivtIKcizGsM6o7i4IPt1F/pGhv8JWyZDqaB",
	"uPQzXZtucMuiY9GKVCjAW7GC9l5CilxKBRIHHYl0vUzfaymjh0T2FzvQaYbZzRVmhCuo726eaKhwBNue",
	"N30wbyAbt6RtK+jGJ3WeW+gG5OMd/4Q9axIl0NdCIcNt9gTZn/oeGSo30FR/EDrYqbgONmd02lxcvKso",
	"XCuxcX0D0mVcm6FW45vwfL5oHm1KGG5Cs80cdNsuZTwJLef6r7bh0G4Tmg3f++pIntalVPHtJKhlk+nE",
	"Aez+cQC5f+f6rwk+cVUOXUnpPeTJnOEEieDbSffi2NHlms3QcsseI+TOesI+pBCdNtHBdqyFMLZrUwWV",
	"9oenvCzfbiTNlAiVIbk35nKkEt0+WawRkk6Seq9jMBz5DRo7SHieOy2raIPRIzi/MKxfCI7i84al4DqH",
	"+JFCMvEkW8NuXC9G8Uab0VATFDnjelGvyKb/8fHbg8Fo+WNR+DzVYQ1frzXRTq81FExpn6Em5j79cKwI",
	"1YGFOekpu5dqIfJWO2vj40c4feruH1D5cjBKZnnjEHdHlbvkWcUuyJF8MTlhLyibRQMvSGZqYSFVIrKD",
	"P6bWrwGfvggcnTXUjQoAn7hd1CnBaZCzNeCLdYmisP+uRUd5ZeoRio1JJVJsukT6BBR66mZqH3sgIuVc",
	"SmX/jeh0ZNHR3pudUfhHVTXVR0uQ4elYUn1x2BEzqdIgFnLXO3tzHg4C0ydX8jjoSimfRRsT3gxOiUYj",
	"vpkQRecHDUbPafEiU7LcpqRrnDHdE6/NWux8bK/JoTZtyJDxWEblug5DMYiZ1xGGyNh4a359t/jdoEbs",
	"rQvD9gboSI19fTtxUXuDi7tD79PMIkfjTs2MakeVDnGSTxqycH4GiSULKitVt2FWF/IJ+wu08vfFZii3",
	"IVrztK8t4tP+TxKdmhpwZtCtP+WRNfYI+R3a4WjtyouLdxs+0DIQplvoFzcrQ7qXxs9HapzFNA7eKl/U",
	"7JbFC2nGHQs79pT0xcW7OS+KXrmnOPSKhExTrohW2xd7Q2bh65G6ajupOd9JzR3jd3LD1uHCt+O5v3BB",
	"pCy8dVhx6pEKRx0PrWyLYA6nPmTzN/77g1gjXHpvyxxh1h3ssaM0LV/hnexJU3XcA6ca+E6YFyHe1x1+",
	"18GUUs6DNAvuseDA7b23+ITOtRWv7rTw7V7hEUE87vaHUad/m3EZXgL040XFZHCANrqg/6rj7Z6PDaOn",
	"KYhf+3l2PK401b4krWGFSaLtFTNBHF+hslEL29KhFEiBcQ9xaLiJZojXmrEXbmRervnWBFNpy1jjw4VV",
	"pZJUCTNdnEVO9t302ugcHWNvIBeVwMexu1Kw4fFxA+PI4+RkqHRCh9JbxVVjtPCx4byt+dp1fgXfl69e",
	"yaMDeuqXmZddawENHIzBrs3TMHbAqCFpdJ7tT4RIVQBulnSPzPPeyZ3CzlsKj5Vx1IuEHE0zLt1k/6Wy",
	"EbeIdI0c0V5xfdk5A7npPgxMSRCdUTsqRpS6cIO3E70z4XX7OByGYjem/d9BkwPzDZeFWrHnIQXpwe9v",
	"nj9kGkxd2sBkoa6KYz4PyWf6rGKl5x7z895jiiESnXwaC2GsTtgtP9+nFufDpxYTDw467O7qkcXL4hM9",
	"slgOHlm8OaaHP68YdszY44qfJQPtuUkEB+du6el9MceKT9+N5Kef6WbqIWmHbfJCVKHE0TMU1Osd/LdS",
	"sjqPqXPL1k77MPHryomgzrY8uWxiMyM/wt6gz+54I28peT0LJ8Gqqok3uI1/2z2cLa1m5J/Co7LqZaT8",
	"zGtZmN4Sts/77PCA7tR9vOoT2ux0po4pBYdqAuexq7QLCboifSpI84Z8/wUvLHVNRa3xHX9Kpe3XqWuX",
	"stLqShSph3VKtRC5IQvMsT7bl6Hv9XSyqksrbjjOq9CXnMjp41As/FEoC64LBsXjb7/96vsW3c9MXA0X",
	"KRlg49HyRkZuRd7VYxvsDhBigZQnCzUUWaO+Nr1oXQ+Nby1VXeJwFxkCksY3QjaEaMy2jEesrpzaXlrR",
	"/jR1vy25WbaiM3pgAR++4MzLq37cHWb9fJoX3KJNkd0qNKK3PcYER7tJPoe90XvgUOQHi8RXkSQZvj/g",
	"USSzq+OXkAqJa12V4HS7VgYO902ut5VVp4E0dOSHOc/F8J2ieLz0qmMDLKisnCZCpRycMtlqXGggaKG6",
	"QXzuYH3OY7hSdV6XGoyDKB1Ps9QXF+/TyuZY1QCnXaY7XR9J2/PemnZXnNZtVMOtLgmIe76z7eaB+wdp",
	"uObXGLI9R20sV9LyHPVGqlYzeeINZhNfUH6ytLYyZ6en6/X6JFjTTnK1Ol1g2klmVZ0vT8NA9NRanAju",
	"u/hSrE4Kl1srcsOevH6BOpOwJWAEewEbtNo1nDV5fPKI6geA5JWYnE2+Pnl08hWt2BKZ4JRqdVA5c8TD",
	"sQgqRi8KzBO+hLjaBz7ggPU8sPvjR4/CMvhbQ+SsOv3TEH8f5j+Lp8FF7i7EA/SuPIwekBmyyG/yUqq1",
	"ZD9prWi/mHq14nqLaaq21tKwx48eMTH3NUrQr2i5O7XfTShFcvLe9Tu9enwaRQ31fjn9EBz2orje8/mU",
	"V5XJInfi3vbBJ7uzVSKt6vA+B83Qq7Id2qbni349/dB1WF4f2Ox0hhXNDm0Kh05/6gOvQ9s+8vj36Ydg",
	"abze8enU1w7Y1X1k3agq4ukHimelm2s0VbpTR/H8YDceOjTwabfNJ2fvPvTkDGz4qioBRczk+n3D3o2E",
	"8mx+PW1+KZW6rKv4FwNc58vJ9fvr/x8AAP//8PdbvffCAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
