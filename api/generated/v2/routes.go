// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/apps-local-state)
	LookupAccountAppLocalStates(ctx echo.Context, accountId string, params LookupAccountAppLocalStatesParams) error

	// (GET /v2/accounts/{account-id}/assets)
	LookupAccountAssets(ctx echo.Context, accountId string, params LookupAccountAssetsParams) error

	// (GET /v2/accounts/{account-id}/created-applications)
	LookupAccountCreatedApplications(ctx echo.Context, accountId string, params LookupAccountCreatedApplicationsParams) error

	// (GET /v2/accounts/{account-id}/created-assets)
	LookupAccountCreatedAssets(ctx echo.Context, accountId string, params LookupAccountCreatedAssetsParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	LookupApplicationBoxByIDandName(ctx echo.Context, applicationId uint64, params LookupApplicationBoxByIDandNameParams) error
	// Get box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	SearchForApplicationBoxes(ctx echo.Context, applicationId uint64, params SearchForApplicationBoxesParams) error

	// (GET /v2/applications/{application-id}/logs)
	LookupApplicationLogsByID(ctx echo.Context, applicationId uint64, params LookupApplicationLogsByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"exclude":               true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", false, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
		"exclude":     true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", false, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountAppLocalStates converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountAppLocalStates(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountAppLocalStatesParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountAppLocalStates(ctx, accountId, params)
	return err
}

// LookupAccountAssets converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"asset-id":    true,
		"include-all": true,
		"limit":       true,
		"next":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountAssetsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountAssets(ctx, accountId, params)
	return err
}

// LookupAccountCreatedApplications converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountCreatedApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountCreatedApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountCreatedApplications(ctx, accountId, params)
	return err
}

// LookupAccountCreatedAssets converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountCreatedAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"asset-id":    true,
		"include-all": true,
		"limit":       true,
		"next":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountCreatedAssetsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountCreatedAssets(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"creator":        true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// LookupApplicationBoxByIDandName converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationBoxByIDandName(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"name":   true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationBoxByIDandNameParams
	// ------------- Required query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument name is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationBoxByIDandName(ctx, applicationId, params)
	return err
}

// SearchForApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplicationBoxes(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"limit":  true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationBoxesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplicationBoxes(ctx, applicationId, params)
	return err
}

// LookupApplicationLogsByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationLogsByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"limit":          true,
		"next":           true,
		"txid":           true,
		"min-round":      true,
		"max-round":      true,
		"sender-address": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationLogsByIDParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "sender-address" -------------
	if paramValue := ctx.QueryParam("sender-address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sender-address", ctx.QueryParams(), &params.SenderAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender-address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationLogsByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/apps-local-state", wrapper.LookupAccountAppLocalStates, m...)
	router.GET("/v2/accounts/:account-id/assets", wrapper.LookupAccountAssets, m...)
	router.GET("/v2/accounts/:account-id/created-applications", wrapper.LookupAccountCreatedApplications, m...)
	router.GET("/v2/accounts/:account-id/created-assets", wrapper.LookupAccountCreatedAssets, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/applications/:application-id/box", wrapper.LookupApplicationBoxByIDandName, m...)
	router.GET("/v2/applications/:application-id/boxes", wrapper.SearchForApplicationBoxes, m...)
	router.GET("/v2/applications/:application-id/logs", wrapper.LookupApplicationLogsByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
