// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/apps-local-state)
	LookupAccountAppLocalStates(ctx echo.Context, accountId string, params LookupAccountAppLocalStatesParams) error

	// (GET /v2/accounts/{account-id}/assets)
	LookupAccountAssets(ctx echo.Context, accountId string, params LookupAccountAssetsParams) error

	// (GET /v2/accounts/{account-id}/created-applications)
	LookupAccountCreatedApplications(ctx echo.Context, accountId string, params LookupAccountCreatedApplicationsParams) error

	// (GET /v2/accounts/{account-id}/created-assets)
	LookupAccountCreatedAssets(ctx echo.Context, accountId string, params LookupAccountCreatedAssetsParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	LookupApplicationBoxByIDandName(ctx echo.Context, applicationId uint64, params LookupApplicationBoxByIDandNameParams) error
	// Get box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	SearchForApplicationBoxes(ctx echo.Context, applicationId uint64, params SearchForApplicationBoxesParams) error

	// (GET /v2/applications/{application-id}/logs)
	LookupApplicationLogsByID(ctx echo.Context, applicationId uint64, params LookupApplicationLogsByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"exclude":               true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", false, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
		"exclude":     true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", false, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountAppLocalStates converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountAppLocalStates(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountAppLocalStatesParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountAppLocalStates(ctx, accountId, params)
	return err
}

// LookupAccountAssets converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"asset-id":    true,
		"include-all": true,
		"limit":       true,
		"next":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountAssetsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountAssets(ctx, accountId, params)
	return err
}

// LookupAccountCreatedApplications converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountCreatedApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountCreatedApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountCreatedApplications(ctx, accountId, params)
	return err
}

// LookupAccountCreatedAssets converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountCreatedAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"asset-id":    true,
		"include-all": true,
		"limit":       true,
		"next":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountCreatedAssetsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountCreatedAssets(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"creator":        true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// LookupApplicationBoxByIDandName converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationBoxByIDandName(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"name":   true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationBoxByIDandNameParams
	// ------------- Required query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument name is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationBoxByIDandName(ctx, applicationId, params)
	return err
}

// SearchForApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplicationBoxes(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"limit":  true,
		"next":   true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationBoxesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplicationBoxes(ctx, applicationId, params)
	return err
}

// LookupApplicationLogsByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationLogsByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"limit":          true,
		"next":           true,
		"txid":           true,
		"min-round":      true,
		"max-round":      true,
		"sender-address": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationLogsByIDParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "sender-address" -------------
	if paramValue := ctx.QueryParam("sender-address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sender-address", ctx.QueryParams(), &params.SenderAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender-address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationLogsByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/apps-local-state", wrapper.LookupAccountAppLocalStates, m...)
	router.GET("/v2/accounts/:account-id/assets", wrapper.LookupAccountAssets, m...)
	router.GET("/v2/accounts/:account-id/created-applications", wrapper.LookupAccountCreatedApplications, m...)
	router.GET("/v2/accounts/:account-id/created-assets", wrapper.LookupAccountCreatedAssets, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/applications/:application-id/box", wrapper.LookupApplicationBoxByIDandName, m...)
	router.GET("/v2/applications/:application-id/boxes", wrapper.SearchForApplicationBoxes, m...)
	router.GET("/v2/applications/:application-id/logs", wrapper.LookupApplicationLogsByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPbNrbov4LRuzNJ+kQ7TdrOq2c6d5yk2c1s+jFJ2r136763EAlJqCmAC4C21L78",
	"73dwDgCCJChRtuwkW/2UWMTHAXBwvs/BH5NcriopmDB6cvbHpKKKrphhCv6ieS5rYTJe2L8KpnPFK8Ol",
	"mJz5b0QbxcViMp1w+2tFzXIynQi6Yk0b2386UexfNVesmJwZVbPpROdLtqJ2YLOpbGs30vv30wktCsW0",
	"7s/6gyg3hIu8rAtGjKJC09x+0uSamyUxS66J60y4IFIwIufELFuNyZyzstAnHuh/1UxtIqjd5MMgTifr",
	"jJYLqagosrlUK2omZ5Nz1+/9zs9uhkzJkvXX+FyuZlwwvyIWFhQOhxhJCjaHRktqiIXOrtM3NJJoRlW+",
	"JHOpdiwTgYjXykS9mpz9MtFMFEzByeWMX8F/54qx31lmqFowM/l1mjq7uWEqM3yVWNord3KK6bo0mkBb",
	"WOOCXzFBbK8T8l2tDZkxQgV58/I5efr06dcEt9GwwiHc4Kqa2eM1hVMoqGH+85hDffPyOcz/1i1wbCta",
	"VSXPqV138vqcN9/JqxdDi2kPkkBILgxbMIUbrzVL39Vz+2XLNL7jrglqs8ws2gwfrLvxmuRSzPmiVqyw",
	"2FhrhndTV0wUXCzIJdsMHmGY5u5u4IzNpWIjsRQbHxRN4/k/KJ7O5DpDmHpIQ2ZyTew3S0kXkpYZVQtY",
	"IXnARC7tOZ5d0bJmD07IS6kIF0ZP3Vkz15ALc/b5k6dfuCaKXpPZxrBeu9lXX5ydf/ONa1YpLgydlcxt",
	"Y6+5NupsycpSug6OmPXHtR/O/uu//3FycvJg6DDgn/EMKr21f/nh/DVVgzsffc5rpZjIN9lCMQrUaklF",
	"f//fOOzTS1mXBVnSK0A1ugK26/oS2xevFpzECfmO50qelwupCXVIW7A5rUtD/MSkFqVlE3Y0d/UJ16RS",
	"8ooXrJja875e8nxJcuo2E9qRa16WFuNrzYqhzUyvbgdlCZ0sXDfaD1jQx7sZzbp27ARbA+3pL//btaOw",
	"RcHtT7Qk3LCVJrrOl4RqB9VSlgVemIh5kFLmtCQFNZRoIy1RnkvlpCWk2FPXvxEASQ4HWJDZpttSFK3R",
	"d/ex+8PWVSntyua01Cy9X3718SbBKmO5hJblxHE7K6S5KbPwA60qncGKM22oYXGbqrIthBQsIbyEH6hS",
	"dGP/1mZjJTQgy5PmdLK8lJplRu4Q3rw8BhsWiVvxju0lypF3S0ZgcvsBxVjAbGHpTFluiHEHYBGCeMFt",
	"SvicbGRNruHqlPwS+rvVWJxeEXv4cGQtKdNSwiHk7m1GArVnUpaMCkBtJ7Zn9vyGBYjS4zU2t7ICTFAE",
	"2WJKClYyWGSDhPCrNkpuYPEWFaZEVvbQZW36l0MUblj83L0rgDiDGkK8kh2LLvmKm/5yv6NrvqpXRNSr",
	"GVP2wL2wYSRRzNRKwGErRnI4s1nr5ld0wTRhVhbhqN7APJZwCWmIYjRfDlMlhGkHIVrRdaZkLYoRUrwh",
	"UsVSkq5YzuecFSSMMgRLM80ueLjYD55Gt4jA8YMMghNm2QGOYOvEsdrrab/AAUWnekJ+crwDvhp5yURg",
	"MUgsGakUu+Ky1qHTkLhip96uPwtpWFYpNufrPpBv3XZYCoFtHINbOYE2l8JQLlhheR8ALQ1DajMIUzTh",
	"vpLTjGr21RdDglPzVbFLtkkS3S4C4HKCmWBpv2Df7asIM+y41CPxEHlsjH9bcW8U3kGjDMlGQkayXx1R",
	"SZtkWv1HyLzx3GgQyG5lnMExPHsb2orOTHenB2q+yHDE3i3hi3eWF895CXz6N3s5/MnW2vKl9tl6zq35",
	"QlBTK3Z2IT6zf5GMvDVUFFQV9pcV/vRdXRr+li/sTyX+9FoueP6WL4Y2xcOaNNZAtxX+Y8dLG2fMOiw3",
	"NYX/nJqhorbhJdsoZueg+Rz+Wc8Bkehc/Y6yVzk0c8oy8VrKy7qKdzJvWepmG/LqxRCWwJDbCCEQDV1J",
	"oRmg6zlKEG/cb/YnS+uYAFIeCQGnv2kJKkgzdqVkxZThLLaM2v/+h2Lzydnkf502ltRT7KZP3YSN1meG",
	"eBjeXGoc7UKa5agZSgGrqjbI01NkIdzjXwJs3TmbY5Gz31hucIPaYDxkq8psHlmAHez6cLulW+L8yH3r",
	"iuR3uI/I1TPgzv2Rf9JObaroggtY+JRcL5kgK3ppyQEV0iyZIvYsmDaevyPdQ5YfTLpOSHCS9skkdWMS",
	"Z6pvfajNqb22cu5bkHMPccQdpWuPs06BdDz5cPK9jT0kCiwOdPZbbd0XF7/QquLF+uLi15aqxUXB1unz",
	"uNPDLuUiK6ihN8PRxQvbNYGgHzMOtf0Ih0KgwyLPHqdwvxz1UNt14Mt2Ixp7pKyJW3F7oqo1M89oSUV+",
	"EHY6c0ONPuHvuOAAxF/RxnU8Zn/MYSsPccRudw9ykdFePfoKHw83dYeDF+DWR3uoIx11kPesEcKUh9ik",
	"D4X4R4w/LMY/K2V+eaOz3HZUMOqumeX68PPKdWrWZ3JNuECzn5N8nsk1+1hVnpmFbfS1eCbXL9yUUvWv",
	"xy4NACcbgzXPXBSIBrekiFdjp/1WKakOsKNeH+vAM52smNZ0wdKOjniNvuGYRXmA4RozuwQwB/+V0dIs",
	"ny/ZHVyOaOwdV+RdYwA9wMbeKZmMbLW71h+taoeC1R52T8oWTaM/9t37eJhMa8vHE6HWme4gQVvOWO93",
	"yO+9zT826icC2FyEcsQC7ElRF8SHvrgLcSFesDkX4Fo/uxCWDp3OqOa5Pq01U06pO1lIckbckC+ooRdi",
	"Mu0yhSHHGAQNOWiqelbynFyyTeoUMJopzU/KhbTcxEhDyyhwIIpxcu7axgHQRzmcILOYIWuTuXDMTLFr",
	"qooE6Do4i2FkDLbaNuuUuLHRp+3CPd346WvQC9gZYKdlh5nqRFwTF+3AI3u+30vjvMD0miB+kVozTf65",
	"otUvXJhfSXZRP378lJHzqmqM0P9soqQs0OCGOqhFGxYO55mxtVE0g7iO5PINoxWc/pIRXa+AF5clgW7t",
	"YCwlF4quXIhIN8xrywEgHON4WbRCWNxb7PV+Ggn3/RO0n+AIoQ1ZsrIfKLbveUVa8Y2Pa4dmvSXs+eLi",
	"F4ho9icTAr4WlAvtuYLmC2EvgYtcnDGSWymAFSfk1ZwAVZu2uruUBUcxA+ngGoMNyTu7RohkIDkVEIRY",
	"FRD2xQWhYtN1oWpmjHdYv2GXbPMuCoTY06HuoqboDpZY1Ha4wBabEybXVJOVBGd6zoQpNy4QK4GaaWBq",
	"LgxGhLTC+gaIBtyaKN7OXpyYhAxELEbhZ7SqyKKUM0dpAoqeBRz1fYaJyo8WAH0AgpJUhNsRkOmNoCqx",
	"EXgRh4I291+oHe9W13Dr8m6McnOuNAT5Mep4BI2vyA0wz0Ug9kH5+5KBVCYVROK1UUr7K51C+hBgNJ1U",
	"VBme82qcVwRH/7HVxw6yi7Unmbmcd3l2j6UmWQg2zmZUp9k3s18sBtYao1PtGj2h8zOhtAwrOCEQTeSu",
	"6qyEgNWQXYJnTBVE0vplY7bFEGjpe8GUaGQqD0Z7R2LhbUm1D6qFyHBPIkaJOQPI+85uACCwvTcR9sZy",
	"K7fzluyKDu3/cCDTK1FY2sF0O8A4hCl5ttKP8/bxgJhF58OZfAyTD1yy/1psr8uS8DmpxaWQ11Y43ic0",
	"aTqxkl+dPiQpQPKzd26B24GNPfo4gB/o6NgsVD/M5yUXjGSEhz0wsAcYxC9zjrHSzf10czCrGHxGLA7a",
	"AUaPkELuCOxKyhIHJt/L+MaKxT5ACsaBxlA/NhCb6G+W1vBAwANZDwOjuUhjY+7pgpUwW8wSAIPMixlj",
	"AuOrCRdTYvW8K1paacVIFF7CIOk8hIctUduJefrRkByftj7gioCL7bUm5Hs3WU0sLHqg05LsFoi3yy2p",
	"I9CwXyhFNHu1Jdti59QDssLQXj2Ehd8CgK5BMoR2OpV3p2ra52gNaZ82wbNIRtLYPoQxyXMZ2LG+pSKE",
	"yv3YZdtJe0SrFcEmM6dfR+JZiiTbW5FLoZnQNaQoGZnL8qRniNCsZCDZZC1JIrtkm7QOw4DAvvXdIiMF",
	"ecjnVqV4FIkuii24NqyVRhQim5vA7Q2k3lTUGKbsRP/34X+e/XKe/YNmvz/Ovv7fp7/+8cX7R5/1fnzy",
	"/ptv/n/7p6fvv3n0n/8xGeAaLKuUlPPh1ZlKze363kgZqDJ0JNCxtcx7X8GVNCwDATW7ouWAL8E2eqlB",
	"eX4JsmxSYGgdNsEsOD5geoRpL9kmK3hZp/HVzfu3F3ba74O9SdezS7YBsZDRfElm1ORLkBtb09s2W6Yu",
	"6c4Fv8YFv6YHW++422Cb2omVRZf2HJ/IvejQ2m3kIIGAKeTon9rglm4hkMDqX7ASPT3DCfF4OQvb8GSb",
	"lbV3mQo/9jaFKYJimCvhSMm1tAPWhlcBrj7INOMmSqvTvRWNVXDB+o/8IJrmmgYN/s4V2Xh1sTLrRklr",
	"s+7jLZbXH37s8g7lm4XT28dOg5JSD8Hg4rjBdiBXZDruJ6dYIdmbv/G2RKoC5p62PLX9a9RkP447GC+C",
	"uGRMWQdW2pnmzhCQJVQJXHsKF8lcyRXcvL5QGiEnH9DIWyjYsJzOrK68Sh9fLPGEHPSdHjRGy7+xzc+2",
	"LZyq7e0F07FXpjFQeB3GqS23O5rb+QJSmO9G3In5GGI9hPZQiAMNsi3f3p43oJSLtL2hXIDcIRdNCl+M",
	"DjNmdT+2ZnltmuzNjj0xmDzvV5rs2k7TWVeR2xarwmyXH2Cj3Fg7ju7HQCfv8uRoVSl5RcvMObuGaLyS",
	"V47GQ3PvG7tncSx9zd59e/76Rwc+uFUYVVlQZwZXBe2qT2ZVVi6RaoDE+hIHS2qCJaHL/52zi+uWg+wa",
	"MuM7GrOVtBxyIYFunJ/R7XUOs7mXy/d0fzk/LS5xi7+WVcFd29jZ0Vvb9tDSK8pLb+D20KaZCi6u8ZHv",
	"zVfiAW7t6Y0c9tlBOUXvdqdvxw5KFM+wJQV+hYUYNJEu1T3ouaDcgrUcEHRFNxZv0DzZJ0miXmX20mW6",
	"5HnaBSJm2qKEQO+9bUyg8YCabEe0vDg9Vs2jsWwzPcLo1gEymiO5mT6aeWjvZtKFF9WC/6tmhBdMGPtJ",
	"wV3sXE97G32RnRurQAkfHxbjuUclCCbcR/1xZUlutbgwyk2UIKvX9Cd1p+bWE87uNvpPYyPuy38AxHbl",
	"Jw7E6IH7IlhKPRYFuzsVLZ/1HvFc8Yw9KWNLLJa7fI5U1II7L8ANTmd32T6vaLnyNWlysZceFVfDuZX2",
	"pLO5kr+ztPUQjK7X/emjibF3evDRWlDn3gxoQ7xTIusGRxXqCd0WpKA93xqoLu8MzpSmpmNzSIOXbkhs",
	"j50+7UjAAcIO9y+KNwEF1XtDqcAL9xxqQ7Y0pvS1jUNET3H85to6mPt2DXo9o/llWnq2MJ03UVYtv62R",
	"xHcOlaLap3RCooCt0NYVXaqYWnHTZgONYnZTSRinHS0DNyIvYFUs7Lq6baWWiWFqcU2F8aWzHEFzvTVD",
	"z5PtdS2VNlAJL7nKguV8Rcu0SFzA7r9rCVkFX3AselVrFpVscgORSnJhEIsKrquSbjCOrdmaV3PyeBpR",
	"NXcaBb/ims9KBi0+xxYzqkFYaUxXvotdHhNmqaH5kxHNl7UoFCvM0lUT05IEbQUsPyF8YsbMNWOCPIZ2",
	"n39NHkLgiOZX7JHdRSeCTs4+/xrKXOEfj9NEHooXbiO6BVBdT/TTeAyRMziGZZ9u1DQVxoq/w/R9y23C",
	"rmPuErR0LGH3XVpRQRcsHY652gET9oXTBC9WZ19EgQX5QNgi3KTnZ4Za+pQtqV6m5QMEg+RyteJm5QIJ",
	"tFxZfGpKBuGkfjis7ocUPsDlP0KUTkXSdr37tTGly8XaVUMs1fd0xdrbOiVUE11bmBt7mSOIJ8RVzSqI",
	"FOUmsmjC3mD5WYwMQ7vzPCoOW5t59n9IvqSK5pb8nQyBm82++qIP8jMoLUagli0rcK7xgN/7viummbpK",
	"b70aQHsvarm+5KGQIltZilI8clS+fSsHA4fSUemeoneTErYPPVbesqNkg+hWt9CNRpT6Vogntgx4S1QM",
	"69kLH/de2b1jZq3S6EFre0I/vXntpIyVVKxt+J35RJGWvKKYUZxdQYB8+pDsmLc8C1WOOoXbQP9h3f5e",
	"5IzEMn+XU4oAJu/2t8P+HC97SMWW8vKSsYqLxenM9kFRHUftCukLJpjmepiBLpYWc+xny/IiiwgMTWas",
	"lGKh7x/TPeADfuUFA5r06sUuqHsD++KfGTQd3hjbzk7xoy8WikPb9h+CI4XI6p1p4W9c2+FAaMvGMJXm",
	"uUt8waiftgcW13tNwU7ORIFiHZC/JeViIDqasWIg8o3BjG+lMhxjTxj7AHFshq+YNnRVpdksGI7xJsKt",
	"toCGLlYb0SyXotBEc5Ezwiqpl7vydQfyzNYCJiu5RpYTl/HMpcJ6iiBTGNnJpRyb6bE1a7QNY6akNEOA",
	"gvARp/tKaQitzZIJEyKpGVS27q4Ec0FA40CGgiSLfGdpvK9ESctyMyXcPMBxlAsfpGTF1GXJiFGMkeul",
	"1IyUjF6xpsg8jPZAk3drXmgoIV+yNc/lQtFqyXMiVcEUvlxgm4MWhJ3cfI9PiMuCc5Hg79YClldIhipS",
	"vE5cpg/oD76MeMVTZKDdn6H2t2blFdMn5N21RCB0kzmsrRDS6jGrDWbQFHw+Z3BPYTmgPEG/5kMEE5TL",
	"h2DrMKxb0we4bWuRgXw8oEQatFSsxXNsRFzaSdtB1LkaK9RYPUKVrFgwNUVDKmw7X7EmU9zKblKZxmAz",
	"Z5iNYSkbF0bJos4Z5ie/beFjBBbvgRQqTEcefsAh/1pBA6c3tniaahVyEHAfo5glZHuFcHbsiimMlm8G",
	"eohEJ4JLG6ogNAIiJdxSWfEoTZzraqFowcb5NYEI/oQ9Ql6tH+FK7jfAz7Z9V2xqySYtjp/m0lHsueUy",
	"MS1P0bJB0evNUJrSSyzzr1iJmSJQIR7aTnuC1ZyxTHORtn7OGQPaTvOcVRad4yexGLOECoVYIBWQ2Op5",
	"qz1hYfgVwxyWLcJAltMyr0uMB93C6a9zWqq2G6VkcyMtgsXPdjQmQW7nmkE8KpZWx/mUJYBRD6joccXU",
	"xrVA7clXMreXQ3V8//1csaxkVyyt0zCKKWN/lddkRcUmnIWdogFjGiWWBMhRVgHHMp72T06xi8DHy+Sw",
	"bjuQ9igGNreIz7liisuC54SL35i7zYEseYzBJxGkMFzU8JKEYg3cyCcIZL91M9z6GKCGcvjth3YwuWDX",
	"rdMuInmuHXqtDb1kCLbP03OsceyZKqZ5UQ+YMhXN25Dth4zu8r6hhp2qcLT6QHjZoVDhkm+7dF1c7qBN",
	"57T6uzRIp1rEdwyxoiFThThCnYhGdcVBfMsB3Uca6S1OPjk+jH3FlG7HOUY2QLbeMbZt0RofS6YoifaF",
	"/WfJfBiLHpxvg+S4wTkvfGF2K/RnLo4isYMD9WQCAPqam3yZDaR22LbYAlNjOppWf0oUIeAWsvmc5WYM",
	"DJAjgC+DDEKBny0ULxgtIOGySffARI8uKA+/l8QOrSO5RmgOUmgj1sAoj/ao7xowZBfy/yxH4v6VhP+B",
	"i3TENfCCjDv7tNkT2zjkabJ7KdkwDbsSolajO1JJTcu0h8dPWrCSbrZNCQ3akwbB1ju5kOdQy8MsQ8Eo",
	"2XT4cTS1u2fbJrdNugsO17N/K+KXB3onKRPRML7MWUjYcAWjEqFeQwZp+8GC6N/Nm5JZy5Z4/7llPgK9",
	"n+Nkv3hY4Y8usB/YeOne5MMV/Jo+xKj+XfI4i/A9SrPE2GJYty9URN1zcSNPumMg9qf9EexXap++vaLl",
	"QMrVG1Yppq12RCh59+35a+e4Hkq8ygfzBKlxCfqGksGaGu+nsC9pfoixkfC9OY2+0X4oHhLDIe3nXu+b",
	"xdEM1Z6LNtSH1/YB+pvP/iAV5S4qo8k66++sy0Qcvr/bFNrmgLuLcPl9g1for1Qv0zUjwKXnCkWAEX5e",
	"C9QTQ6QMRKl4QUHOe9UiCJSLWNIvP3/y/558+ZX/88mXX8WlIcJ3qz7j11RxiLh2YuKh0iV8xqpKxL/4",
	"0t/mwRKTxSwLYdipJ5+mE1ciMq6LtzP3gutsxRcKZIH0qMOlLSMjeSKXFWXQxOODjt8PC6kdDGktvANx",
	"A15j4fAzp7CpV4E8cVCar6oSYx/cUL2aCnvlezYhmncf8XvocMk7D3hkN/a7Hz7O8aaw7K4asT268Qfx",
	"XK6qkg1zrgqjVvANThRooU5O9Nqit4DKPK9VYxrvxi/+TEuOz4BpqJUjpKygOE5luLD/gdRJWRv8P6PK",
	"/gcrt7X/h1gV0Uk71ATOBapV+IF8ZsTEStIF6vGub4qK3jD9epRPp88VExRxa05GSxqBkynRE9Xkmdhb",
	"CV8W8CVOZyEICMRQaf+XJgUzTK2sSrmU12RV50vI4KAL5hM6gKGBP6MzUWt0H+PaTkxyMQG6ojkOhHGD",
	"JVULpogL5SPuAYLAIFeUd95X7EbrgIWJpiSFXWkm/XdFQa6Lkk0S2SwejEu2OUWxBX6/AeEYzlkZAAwy",
	"V+4QpFslwMQ5VDvw9bIl8WEZxlbaWQD/gJKfhc/dtT0lv3522NjlwTrgOtSa9dc53gcc722CVDRrG6u2",
	"9Dd3WNswszHaRlo2tt1B3cENgRqHBEAl//z8n0SxuXvW+bPPYILPPpu6pv980v5sEe+zz9KGkftSdHCP",
	"3Bhu3iTGtAt9dx+9BoKmoWCUe5U6l6uVFGD/LcuO810UBMIRNTxTLQgTV6yUFUu2xg2ODh3SzhRb1CVF",
	"pzMXgqlWpzH5BJovBCvMWmCg0lv4891apNrGrB5aR9uRKgQdVdu/WYX0TsVPzObIIW/ipiM2mRfNiBih",
	"fZsRX2J4eBgRhpozdZsx37kxRhTfXQiFabaYH8F9tCAIaXjCnZdofQShL8rr8yBCYAX7V01LFzgiIEzj",
	"HeQC5JdMYL3dWocq64QJXSsXp2FhhfEsKG4YGTN43TS5aeXdbFs1SwU+rOAec9GhkNeCXa3oUdjDkdtr",
	"xdn2XCyyLSlwOeTAuYY+xxkMz1sLq9rBLRKqFStG1raI3dSQ5+n7DwzfFHFrnrxIZ0BGL2GLfiUY8vDV",
	"i0eEdx+9iHNNo4eNdy87riM3DiIMOe7B0s143QeKOWNDsQGdcCoyZwNupl3VyuZXTaEyaNX15+yEcmR8",
	"6F+phspjrrmLY/lIg0JbQLpXjftDxRn6e1ezmk4WStbpGMIFVo3oGq+tYgBCF0a2oUHu9MmXX5GCL5g2",
	"J+TvkMKHzLdfo7R9moQ3tU9bJZYJABbSwlEecuFL0ZxLd6C9MDXuwphgmPs/4ZsUUZlOQC7JzDoVavmq",
	"J7OQysV8QUZzRG9aPrRDBFhyYRRF4pvJ+TyZ5f8D/N6YkpSnyYr1T30EVcZ3w28oFfwNHx1/P53sKBtY",
	"XoWKgTcjPCUbKmBdrhPX5+mTrLlBJ+S17U2YmEtlNe1VbawMwNaQ7Ye2zpaUCilwpinmD9lv4nemJBgS",
	"BJEiZz0eyKPNhpAtmoM8r13coYUhpPOH5JCHb0GamSKQj1BP7V81UgvDUfyx2/hztIuVZTwW6L8veZnA",
	"gkra7zqGY0qEJPhMTdwSA2ybVE6E2aVPtBDpfq95XNKkSNvJLCYUWB6qqQTWWCnyJRXNuxu760b1cXKf",
	"99HbtL97zQ9Z32oLnB+2wJWQA7FmwlXxtAoKJFUGi9r9AlzRzYoJc0PK9yP2xjA2qDuvtmsAakAD8L13",
	"VfG/ZJvMyPTY9mNI6g+qFthOkdpGa5wO6D0hYMe/WNLIrniDrIgwryEUOooe97ZTp9IFG/wl2xDlTQNx",
	"wWRUm26gZSFbNDzl+X/HV6zRS1CQS4lAfBRLRPUyrddiHgyS7AdblhOG2Y4VegArsO92nAinsAfavg19",
	"INo+G7akbSrWjuppPVLQDmMHHf+EvAjpBeBrwUDbJucA7U9djwwm6YeaCVx5OxVV3uYMTpuLi18qDHJK",
	"XFzXAGUZ26Yv1bgmNJ8vwlNHCcONb7aeM9W0SxlPfMu5+r1p2Lfb+Gb9V7JalKdxKVV0M/Fi2WQ6sQDb",
	"fyxA9t+5+n0CD0OVfVdS+g65Y85ggkTI6qStOLZkuXAZGmzZYYTcWoXXBeKB0yZibPtaCGO7NtYdaX54",
	"Tsvy3VrgTIlQGaR7Qy5HLGztUqwCkbSU1HkdveHIXdDYQULz3EpZRRPCHcH5QJNu+TQM7O4XUGsx8T2J",
	"ZOIhs4BuVC0G1w02o74kyHNC1aJeoU3/7te3YwWDRYN54bI7+5VvndSEN71WrCBSubwuPndJe0Olm0aW",
	"s8QH4F7LBc8b6ayJKh/A9KnVP1jliqhIkeXBIW5ZlVXyjCQX6Ei+mJyQV5gDohgtkGYqbliqsGJr/ZCQ",
	"fs3gwQiP0Vk43ahs7om9Ra3ClRowWzF45y1RSvVTLdVJK10PnNgQVULBpn1IH+CEntuZmicS8JByKoQ0",
	"n9A57Vmqs/PSZRT+UVWhZmfJhH9wFUVfGHbATCoV4wux7XW6OfWMQHePK8kO2lTK5Z7GB697XCJIxDcj",
	"ouD8wMHwESpaZFKUmxR1jfOMO+Q17MXWJ+pC5rFuQoa0W2VU5GrcEj2Z+TFaISA2aM0/HnZ9N6iseuty",
	"qp0BWlRjV99WXNTOx8LbQ++SzCJH41bJDCsulXbhSJ8Uyzz/9BRLFFiMqW7CrC7EOfmdKen0xTCUvRCN",
	"edpV5HDJ8ieJTqFymu516065Z2U6XPwW6XCw4uPFxS9r2pMyAKZbyBc3K96584xfDlQGi8/Ye6tcKbBb",
	"lvzDGbds7NADzBcXv8xpUXSKJMWhV0hkQpEf3G1XIg2QhV4PVCPbeprzrae5ZfxWRtW1V/i2PJLnFUTM",
	"Xbv2O449UuGow6GVTenI/tRjLn/w349CDa/03hY5/Kxb0GNLQVe6Ap3sPNTqdsDJAN8JcSTE+br978qb",
	"Usq5p2bePeYduJ1XCs+Rr61oddBysTuJRwTxsNufDTr9mzxF/36eGy8qwQIDNNEF3bcQb/foqh89fYLw",
	"tZudRuP6TM37y4qtILWyUTETh+PqOgaxsCm4iYEUEPcQh4braIZ4rwl5ZUem5TXdaG8qbRBreDi/q1jI",
	"KWGmi3Ov0b6b3huVg2PsDct5xeFJ6TYVDDg+bGAceNIbDZWW6GBSKL8KRgsXG06bSqlt55f3fbmajzRi",
	"0FO3zbRsWwtwYG8Mtm2e+7H9isKRRvxsdyJEqm5u2NIdNM95J7cSO2cp3JfGYS8kcjjNMHUT3fe9Btwi",
	"wjayh/YdVZctHkh1+zldTIJojdoSMaLUhRu8OOicCT82T6pBKHYw7f/MFDow31BRyBV56VOQHv785uUj",
	"opiuS+ORzFcjscjnIPlIHyOs1Nyt/G3nCUIfiY4+jQXXRiXslh/vA4Xz/gOFiWf67OoO9TThZfGBniYs",
	"e08T3nyl4x8l9Ddm6EnCjxKBdmgS3sG5nXo6X8y+5NN1Q/rpZrqZeIjSYZO8ENX1sOfpy9B1GP+thKzW",
	"E+TUkGsrfej4TeJEUGdT1FuE2MzIj7Az6LM93sALRE7OgkmgFmni5WrtXkT3vKWRjNwDcliMvIyEn3kt",
	"Ct3ZwuZRnC0e0K2yjxN9fJutztQhoWCsJPA2dpW2IQFXpEsFCS+vd9+9ggLRWAoaXr/HVNpudbdmKysl",
	"r3iReo6mlAuea7TA7Ouzfe37vp9OVnVp+A3H+c73RSdymh3yhWOFoqCqIKx48uWXn3/dLPcjI1f9TUoG",
	"2LhlOSMjNTxvy7FhdSOImD/Kk4Xsk6xBX5taNK6H4FtL1XgY7yIDQNLrjRbrQzRmG0IjVJdWbC8Nb36a",
	"2t+WVC8b0hk9SwDPRVDi6FU37g6yfj7Mu2fRpchuFRrRuR5DhKO5JB/D3eg8C8jz0STxu4iS9Kv2uyWi",
	"2dXii0+FhL2uSmZlu4YG9u9NrjaVkaf+aJDl+znf8v7rPvF46V2HBlCGWFpJBEs5WGGykbjAQNBAdYP4",
	"3N7+vI3hSlVHXSqmLUTpeJqlurj4NS1sDlUNsNJlutP7Pc/2bWdP2zuO+zYo4VaXCMQ962zbceD+Qerv",
	"+XsI2Z6DNJZLYWhumuI0k3NnMJu4MuyTpTGVPjs9vb6+PvHWtJNcrk4XkHaSGVnny1M/ED5QFieCuy6u",
	"gKmlwuXG8FyT8x9fgczETckggr1ga7DaBcyaPDl5jPUDmKAVn5xNnp48Pvkcd2wJSHCKtTomZ3+8n05O",
	"r56cxqEyi+R7c4yqfImKgGt7ArnwDLWbV0Vo9FKqcz+cc3vgi9tnvwy9rWWvrP37XzVTm4l/3CI2AzXO",
	"uP712J3ljGYKjSGYplaYN64Yyb0QF3ma8UVIdsUE4Sj2lXzFw5s2yiq1jmsnYIa2ewLcVLqjCxbBe0J+",
	"0iwqJysvIQkExU0fUu6roYZOA4DZIVJwNSjfT/HFXXOiLkT4UeEt7wtIewKniYhCR09apRqdqda9beNK",
	"duQbUovSyhfe/QBeQx2WBlU8sZpFTt0OuHwrH7eqh0/AT5I5CDML4Z4n4h48AN0ImImLtAUrl1OdHI5P",
	"Q/mROG5g2rwV6Az1UxIKenQszFPn9/dPgfdf2MaogqEFuyDgjJZlapmRr6m7zG/XbpkN9uNqdZ0vIUKl",
	"C2jv7W94FseVC2jevcK9mbr+UdSAT5YL0QKhpWht4Ig+djvYuiplwSZnc1pqlt4ehotsbU0QEHwgJu6d",
	"C4zopAlqjMHUWRQdMGmlONoWQop0wY+u7KDNBki35WeTfW9d6V4o+0ivnJ3iVvfNR2FGLnb3LBmsF8oh",
	"20t4yTZDwDTJysPUbmds5fbPQ+B7PuMjG5pHprCqLNSar5iCIUUOzhUN1MJbLhHnfXBNwTWdlfDuCpol",
	"WpEZgwQhlMLe4wTi0jPDDLkbk7Jlhl/hrSQoAgY37cnjx152cqbGaLTT3zQKxc2Aw7G8+yTnpC6gLzS6",
	"NfE51IhHHxie6zXKDKuqNsNxAmuTAafuj/yTdkSyogsuXHQNGPBW9BLsdALTtFxwm7+dPs/dsv/gmXEC",
	"g8OYEXa0RiZrb8CvSVm3DflDCHJ5ZBf4xa3OcbD623AVts46fMMxYL9xCIgBulg97v108uWnvgSL1HSh",
	"oXgfyNyTX993JPnTP3x0KS/eD4r1r6W8rKtgH44fGOpJ99jW3atnGyASW6X7YHX2NBdIilVCIooSgJzE",
	"e2RUzfaSVcdS4ANSzKOMeJQR70dGvBNWugcDvUOGmWZSRx41+eLxF0c2+/Gw2RKY3w42e9qjALv4rohi",
	"3rp0VFZIbsuN87+HNBEsW7KFO59XFWTGQ3CL/pj49MHVjD8rWz4aOW9k5DwwK+3c9z3U02aW5qYeldUo",
	"+aWzsUeJ4CgRfIoSQUi1+yBygFdNPh7+fycevyPPP/L8e+P54UaPY/TxYwxH/u75ezCiHJn6kal/akw9",
	"Udx2PxbvrZVpY+atWP5zHPo8Bu2o/x9lgaMscDf6f4sA7Kv6HwWCRLWLo1hwFAs+bbFgf50/CAQdX+hB",
	"RIGjEeDI+I+M/4MbAY7M/qj9H9n8p8/m47zQsYF17Zor71rvcCnmyDYriGDX9rIZSWRpmdEODh8PtIvB",
	"H/nGYbJioseB7CxzvnbU2RfEyWXnYUkhDcNC14NQQAkKGGzvoHVMJh6KWQ9f/0hO7Os8x5MeoDZ1atv4",
	"4t2msvtQQsDeb3a3PAbWTYmEEK/pq4+H3ECoDK75gmQhU93+ssKfIPvxLV/Yn0r8CfKuMes0tXbNF8OL",
	"19Bthf/Y8UYt0t36aCHtlPPZxknt6bNIi7wfZdCrn5IaYrWSOWaCxVOvuMi2Th8aHASEGZtLl/oSwUDX",
	"O2DwDfbNlrhTDcavLFrTglvKa/iKnZDvHKGhgrx5+Zw8ffr0a4IX3mo0iC5DC8Yh8WWFGLhAMApqwucx",
	"5OfNy+cAwNsQyzqq1c5DDRh1qJXDiB/fwv/ESZZ/yky3D5kUgat2pgenTeJTM9vFk/AgzVZLxWE17D+J",
	"ZjyddNWJ278t19GQ2jvZmfCY/PVvpbCOcUjHpRzaXpehag57+JLv3r/7EhQI1B9alfrDpUOJIdRrbQqN",
	"JQk6NruZ4H00NR9NBkcf85/Rx/xvnUIc7dPpH21ivTuVOHqua8h42TRJpxGnROIuy9gpFv/pPIV3Rnb2",
	"JDb3ly16S/fR0ffyiYiyPSJ0OpPrQUL0FxD/rPbfkkXhGs7kmth7NXXii+7U4gwNoLWzOTxzvzUPoDrD",
	"/kLSMqNqgS/bPoAxuFicQb8HWO2FAxGpnfiBDbkwZ58/efqFa6LoNTwBr6cODACKfPUFAGG7Pph99cUD",
	"722gUFrb/nR2/s03boxKcWHorGTOsNCbUxt1tmRlKV0HJxazXkP74ey//vsfJycnD8ZQcLm2RJyK4nu6",
	"YvdPy8+bI+PiDk6k3e6+Nj0pd+L+jrUHpe2Rf/nh/DVVg+bK8Pm2zGQbv3gm1ykKYa9ZVIDk6OI/spnD",
	"sRldr1ZUbSyKMwMkI0I1F1mHdoOOAHtj/sT0vhyqYUrwsHXgOlB8nLYFRy2VFUpLtua5XChaLXlOS3wx",
	"b7cZ5xmAd++0+mhP+LjsCcNv7Fa8WHdesCZcFGydVvkDuo8yTjyT6xduSql2mq97GIiTjSEGz+Ir1L5u",
	"R+5y5C53yV0Q7Ubwlb2ML6elXOg9LDDEth8hxL+WC/1hTDFHlnCYqLQPHHn0Jw0Dgvdhgj+994Q4lqx1",
	"j/5sd0Nhq6x5//NuKtd+/KLEnbomSrnIPMfYv0zP4oXtmnCnfAoeDyTVt7CYbrPVbU94ih3O0HKbkjIq",
	"Wenofz0yxz24VStkwD1nf3/BArtnt6PvsPoddL5acDM0n/02uf9svmN61jE966ia3qeTHw759A9/PXc7",
	"9t0z6rsrhNuG47XJ+Knno0v/Tl36QObG0sJ7LPoMUx7JzdGY93FHJHQp5umMllTkbKdFDkVvbcAM7V+4",
	"uV5KICiuXj0QmK0U1U921I2OutHxkbdj/tHY/KODCV2HlUZi4jlKS/uOC36sppnierOGNRxVtj+TALJP",
	"KYqWewJssY4+batHgVUoLEvFyhRbdb5jNYpjNYpjNYpjNYpjNYp7dkMf60Yc60Yc9bZ/77oRY0JNnPfS",
	"AioFw7jhVmPk+4Pix11Hn/QW9VyuZlywRvPxK2heQjbSHhQ0WlIT+LBvaCTRIbxgx7oyJcsB/grRN6AN",
	"54xfwX/nirHfWWaoslL1GH7bWo0HEN6sjOaPH63ca21WGkZLG/H1OhCXhd3nstwQE4rIEkr8SqZWQN7I",
	"mlzDZSn5JfR3D17aTV8Ri8SdB6iNJEbVg15p1z0DeHZWBpneh+fnWOTkWOTkWOTkT2AGmZUyv9Snf8BR",
	"Z2hA2Om9hk5D1otn9uMuiwVeRpwuXbYpBuh+Latbsy1gccdc6E8Y40eZ+aIoy7HVZrvWPS8BpyUxrkHC",
	"7crBQfPar45tiPg8Wg2PVsOj1fBoNTxaDY81bI+2yKMt8miLPNoij7bIoy3y7myRH9J+ePcPYh4tlEcL",
	"5dFe80Fza+KjPf3D6kS7s2uIVR/LFoccMlfGWDcmxcYpZeMLyX9CJCTarr0u6/jLeUxEOZKXj8Uc/H46",
	"0Uxd+bteq3JyNlkaU+mz01O2pquqZCe5XJ1CpQfX/48g98vVChhV+MWNHP3iSNn7X9//TwAAAP//Fa4s",
	"7pVeAQA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
