// Package generated provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v2/accounts)
	SearchForAccounts(ctx echo.Context, params SearchForAccountsParams) error

	// (GET /v2/accounts/{account-id})
	LookupAccountByID(ctx echo.Context, accountId string, params LookupAccountByIDParams) error

	// (GET /v2/accounts/{account-id}/apps-local-state)
	LookupAccountAppLocalStates(ctx echo.Context, accountId string, params LookupAccountAppLocalStatesParams) error

	// (GET /v2/accounts/{account-id}/assets)
	LookupAccountAssets(ctx echo.Context, accountId string, params LookupAccountAssetsParams) error

	// (GET /v2/accounts/{account-id}/created-applications)
	LookupAccountCreatedApplications(ctx echo.Context, accountId string, params LookupAccountCreatedApplicationsParams) error

	// (GET /v2/accounts/{account-id}/created-assets)
	LookupAccountCreatedAssets(ctx echo.Context, accountId string, params LookupAccountCreatedAssetsParams) error

	// (GET /v2/accounts/{account-id}/transactions)
	LookupAccountTransactions(ctx echo.Context, accountId string, params LookupAccountTransactionsParams) error

	// (GET /v2/applications)
	SearchForApplications(ctx echo.Context, params SearchForApplicationsParams) error

	// (GET /v2/applications/{application-id})
	LookupApplicationByID(ctx echo.Context, applicationId uint64, params LookupApplicationByIDParams) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	LookupApplicationBoxByIDandName(ctx echo.Context, applicationId uint64, params LookupApplicationBoxByIDandNameParams) error
	// Get box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	SearchForApplicationBoxes(ctx echo.Context, applicationId uint64, params SearchForApplicationBoxesParams) error

	// (GET /v2/applications/{application-id}/logs)
	LookupApplicationLogsByID(ctx echo.Context, applicationId uint64, params LookupApplicationLogsByIDParams) error

	// (GET /v2/assets)
	SearchForAssets(ctx echo.Context, params SearchForAssetsParams) error

	// (GET /v2/assets/{asset-id})
	LookupAssetByID(ctx echo.Context, assetId uint64, params LookupAssetByIDParams) error

	// (GET /v2/assets/{asset-id}/balances)
	LookupAssetBalances(ctx echo.Context, assetId uint64, params LookupAssetBalancesParams) error

	// (GET /v2/assets/{asset-id}/transactions)
	LookupAssetTransactions(ctx echo.Context, assetId uint64, params LookupAssetTransactionsParams) error

	// (GET /v2/blocks/{round-number})
	LookupBlock(ctx echo.Context, roundNumber uint64) error

	// (GET /v2/transactions)
	SearchForTransactions(ctx echo.Context, params SearchForTransactionsParams) error

	// (GET /v2/transactions/{txid})
	LookupTransaction(ctx echo.Context, txid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// SearchForAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAccounts(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"asset-id":              true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"include-all":           true,
		"exclude":               true,
		"currency-less-than":    true,
		"auth-addr":             true,
		"round":                 true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAccountsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", false, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "auth-addr" -------------
	if paramValue := ctx.QueryParam("auth-addr"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "auth-addr", ctx.QueryParams(), &params.AuthAddr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter auth-addr: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAccounts(ctx, params)
	return err
}

// LookupAccountByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"round":       true,
		"include-all": true,
		"exclude":     true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountByIDParams
	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------
	if paramValue := ctx.QueryParam("exclude"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", false, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountByID(ctx, accountId, params)
	return err
}

// LookupAccountAppLocalStates converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountAppLocalStates(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountAppLocalStatesParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountAppLocalStates(ctx, accountId, params)
	return err
}

// LookupAccountAssets converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"asset-id":    true,
		"include-all": true,
		"limit":       true,
		"next":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountAssetsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountAssets(ctx, accountId, params)
	return err
}

// LookupAccountCreatedApplications converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountCreatedApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountCreatedApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountCreatedApplications(ctx, accountId, params)
	return err
}

// LookupAccountCreatedAssets converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountCreatedAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"asset-id":    true,
		"include-all": true,
		"limit":       true,
		"next":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountCreatedAssetsParams
	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountCreatedAssets(ctx, accountId, params)
	return err
}

// LookupAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAccountTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "account-id" -------------
	var accountId string

	err = runtime.BindStyledParameter("simple", false, "account-id", ctx.Param("account-id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAccountTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAccountTransactions(ctx, accountId, params)
	return err
}

// SearchForApplications converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplications(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"application-id": true,
		"creator":        true,
		"include-all":    true,
		"limit":          true,
		"next":           true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationsParams
	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplications(ctx, params)
	return err
}

// LookupApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationByID(ctx, applicationId, params)
	return err
}

// LookupApplicationBoxByIDandName converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationBoxByIDandName(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"name":   true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationBoxByIDandNameParams
	// ------------- Required query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument name is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationBoxByIDandName(ctx, applicationId, params)
	return err
}

// SearchForApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForApplicationBoxes(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
		"limit":  true,
		"next":   true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForApplicationBoxesParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForApplicationBoxes(ctx, applicationId, params)
	return err
}

// LookupApplicationLogsByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupApplicationLogsByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":         true,
		"limit":          true,
		"next":           true,
		"txid":           true,
		"min-round":      true,
		"max-round":      true,
		"sender-address": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameter("simple", false, "application-id", ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupApplicationLogsByIDParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "sender-address" -------------
	if paramValue := ctx.QueryParam("sender-address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sender-address", ctx.QueryParams(), &params.SenderAddress)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sender-address: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupApplicationLogsByID(ctx, applicationId, params)
	return err
}

// SearchForAssets converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForAssets(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
		"limit":       true,
		"next":        true,
		"creator":     true,
		"name":        true,
		"unit":        true,
		"asset-id":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForAssetsParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "creator" -------------
	if paramValue := ctx.QueryParam("creator"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "creator", ctx.QueryParams(), &params.Creator)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creator: %s", err))
	}

	// ------------- Optional query parameter "name" -------------
	if paramValue := ctx.QueryParam("name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "unit" -------------
	if paramValue := ctx.QueryParam("unit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "unit", ctx.QueryParams(), &params.Unit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unit: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForAssets(ctx, params)
	return err
}

// LookupAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetByID(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":      true,
		"include-all": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetByIDParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetByID(ctx, assetId, params)
	return err
}

// LookupAssetBalances converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetBalances(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"include-all":           true,
		"limit":                 true,
		"next":                  true,
		"currency-greater-than": true,
		"currency-less-than":    true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetBalancesParams
	// ------------- Optional query parameter "include-all" -------------
	if paramValue := ctx.QueryParam("include-all"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "include-all", ctx.QueryParams(), &params.IncludeAll)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include-all: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetBalances(ctx, assetId, params)
	return err
}

// LookupAssetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) LookupAssetTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameter("simple", false, "asset-id", ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params LookupAssetTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupAssetTransactions(ctx, assetId, params)
	return err
}

// LookupBlock converts echo context to params.
func (w *ServerInterfaceWrapper) LookupBlock(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "round-number" -------------
	var roundNumber uint64

	err = runtime.BindStyledParameter("simple", false, "round-number", ctx.Param("round-number"), &roundNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round-number: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupBlock(ctx, roundNumber)
	return err
}

// SearchForTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) SearchForTransactions(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty":                true,
		"limit":                 true,
		"next":                  true,
		"note-prefix":           true,
		"tx-type":               true,
		"sig-type":              true,
		"txid":                  true,
		"round":                 true,
		"min-round":             true,
		"max-round":             true,
		"asset-id":              true,
		"before-time":           true,
		"after-time":            true,
		"currency-greater-than": true,
		"currency-less-than":    true,
		"address":               true,
		"address-role":          true,
		"exclude-close-to":      true,
		"rekey-to":              true,
		"application-id":        true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchForTransactionsParams
	// ------------- Optional query parameter "limit" -------------
	if paramValue := ctx.QueryParam("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "next" -------------
	if paramValue := ctx.QueryParam("next"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "next", ctx.QueryParams(), &params.Next)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter next: %s", err))
	}

	// ------------- Optional query parameter "note-prefix" -------------
	if paramValue := ctx.QueryParam("note-prefix"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "note-prefix", ctx.QueryParams(), &params.NotePrefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note-prefix: %s", err))
	}

	// ------------- Optional query parameter "tx-type" -------------
	if paramValue := ctx.QueryParam("tx-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "tx-type", ctx.QueryParams(), &params.TxType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tx-type: %s", err))
	}

	// ------------- Optional query parameter "sig-type" -------------
	if paramValue := ctx.QueryParam("sig-type"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sig-type", ctx.QueryParams(), &params.SigType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sig-type: %s", err))
	}

	// ------------- Optional query parameter "txid" -------------
	if paramValue := ctx.QueryParam("txid"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "txid", ctx.QueryParams(), &params.Txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// ------------- Optional query parameter "round" -------------
	if paramValue := ctx.QueryParam("round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "round", ctx.QueryParams(), &params.Round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Optional query parameter "min-round" -------------
	if paramValue := ctx.QueryParam("min-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "min-round", ctx.QueryParams(), &params.MinRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter min-round: %s", err))
	}

	// ------------- Optional query parameter "max-round" -------------
	if paramValue := ctx.QueryParam("max-round"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "max-round", ctx.QueryParams(), &params.MaxRound)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max-round: %s", err))
	}

	// ------------- Optional query parameter "asset-id" -------------
	if paramValue := ctx.QueryParam("asset-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "asset-id", ctx.QueryParams(), &params.AssetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	// ------------- Optional query parameter "before-time" -------------
	if paramValue := ctx.QueryParam("before-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "before-time", ctx.QueryParams(), &params.BeforeTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter before-time: %s", err))
	}

	// ------------- Optional query parameter "after-time" -------------
	if paramValue := ctx.QueryParam("after-time"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "after-time", ctx.QueryParams(), &params.AfterTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after-time: %s", err))
	}

	// ------------- Optional query parameter "currency-greater-than" -------------
	if paramValue := ctx.QueryParam("currency-greater-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-greater-than", ctx.QueryParams(), &params.CurrencyGreaterThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-greater-than: %s", err))
	}

	// ------------- Optional query parameter "currency-less-than" -------------
	if paramValue := ctx.QueryParam("currency-less-than"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "currency-less-than", ctx.QueryParams(), &params.CurrencyLessThan)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter currency-less-than: %s", err))
	}

	// ------------- Optional query parameter "address" -------------
	if paramValue := ctx.QueryParam("address"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address", ctx.QueryParams(), &params.Address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Optional query parameter "address-role" -------------
	if paramValue := ctx.QueryParam("address-role"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "address-role", ctx.QueryParams(), &params.AddressRole)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address-role: %s", err))
	}

	// ------------- Optional query parameter "exclude-close-to" -------------
	if paramValue := ctx.QueryParam("exclude-close-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "exclude-close-to", ctx.QueryParams(), &params.ExcludeCloseTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude-close-to: %s", err))
	}

	// ------------- Optional query parameter "rekey-to" -------------
	if paramValue := ctx.QueryParam("rekey-to"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "rekey-to", ctx.QueryParams(), &params.RekeyTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter rekey-to: %s", err))
	}

	// ------------- Optional query parameter "application-id" -------------
	if paramValue := ctx.QueryParam("application-id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "application-id", ctx.QueryParams(), &params.ApplicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SearchForTransactions(ctx, params)
	return err
}

// LookupTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) LookupTransaction(ctx echo.Context) error {

	validQueryParams := map[string]bool{
		"pretty": true,
	}

	// Check for unknown query parameters.
	for name, _ := range ctx.QueryParams() {
		if _, ok := validQueryParams[name]; !ok {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unknown parameter detected: %s", name))
		}
	}

	var err error
	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameter("simple", false, "txid", ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.LookupTransaction(ctx, txid)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}, si ServerInterface, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/v2/accounts", wrapper.SearchForAccounts, m...)
	router.GET("/v2/accounts/:account-id", wrapper.LookupAccountByID, m...)
	router.GET("/v2/accounts/:account-id/apps-local-state", wrapper.LookupAccountAppLocalStates, m...)
	router.GET("/v2/accounts/:account-id/assets", wrapper.LookupAccountAssets, m...)
	router.GET("/v2/accounts/:account-id/created-applications", wrapper.LookupAccountCreatedApplications, m...)
	router.GET("/v2/accounts/:account-id/created-assets", wrapper.LookupAccountCreatedAssets, m...)
	router.GET("/v2/accounts/:account-id/transactions", wrapper.LookupAccountTransactions, m...)
	router.GET("/v2/applications", wrapper.SearchForApplications, m...)
	router.GET("/v2/applications/:application-id", wrapper.LookupApplicationByID, m...)
	router.GET("/v2/applications/:application-id/box", wrapper.LookupApplicationBoxByIDandName, m...)
	router.GET("/v2/applications/:application-id/boxes", wrapper.SearchForApplicationBoxes, m...)
	router.GET("/v2/applications/:application-id/logs", wrapper.LookupApplicationLogsByID, m...)
	router.GET("/v2/assets", wrapper.SearchForAssets, m...)
	router.GET("/v2/assets/:asset-id", wrapper.LookupAssetByID, m...)
	router.GET("/v2/assets/:asset-id/balances", wrapper.LookupAssetBalances, m...)
	router.GET("/v2/assets/:asset-id/transactions", wrapper.LookupAssetTransactions, m...)
	router.GET("/v2/blocks/:round-number", wrapper.LookupBlock, m...)
	router.GET("/v2/transactions", wrapper.SearchForTransactions, m...)
	router.GET("/v2/transactions/:txid", wrapper.LookupTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XPbNrbov4LRuzNJ+kQ7TdrOq2c6d5yk2c1s+jFJ2r136763EAlJqCmAC4C21L78",
	"73dwDgCCJChRtuwkW/2UWMTHAXBwvs/BH5NcriopmDB6cvbHpKKKrphhCv6ieS5rYTJe2L8KpnPFK8Ol",
	"mJz5b0QbxcViMp1w+2tFzXIynQi6Yk0b2386UexfNVesmJwZVbPpROdLtqJ2YLOpbGs30vv30wktCsW0",
	"7s/6gyg3hIu8rAtGjKJC09x+0uSamyUxS66J60y4IFIwIufELFuNyZyzstAnHuh/1UxtIqjd5MMgTifr",
	"jJYLqagosrlUK2omZ5Nz1+/9zs9uhkzJkvXX+FyuZlwwvyIWFhQOhxhJCjaHRktqiIXOrtM3NJJoRlW+",
	"JHOpdiwTgYjXykS9mpz9MtFMFEzByeWMX8F/54qx31lmqFowM/l1mjq7uWEqM3yVWNord3KK6bo0mkBb",
	"WOOCXzFBbK8T8l2tDZkxQgV58/I5efr06dcEt9GwwiHc4Kqa2eM1hVMoqGH+85hDffPyOcz/1i1wbCta",
	"VSXPqV138vqcN9/JqxdDi2kPkkBILgxbMIUbrzVL39Vz+2XLNL7jrglqs8ws2gwfrLvxmuRSzPmiVqyw",
	"2FhrhndTV0wUXCzIJdsMHmGY5u5u4IzNpWIjsRQbHxRN4/k/KJ7O5DpDmHpIQ2ZyTew3S0kXkpYZVQtY",
	"IXnARC7tOZ5d0bJmD07IS6kIF0ZP3Vkz15ALc/b5k6dfuCaKXpPZxrBeu9lXX5ydf/ONa1YpLgydlcxt",
	"Y6+5NupsycpSug6OmPXHtR/O/uu//3FycvJg6DDgn/EMKr21f/nh/DVVgzsffc5rpZjIN9lCMQrUaklF",
	"f//fOOzTS1mXBVnSK0A1ugK26/oS2xevFpzECfmO50qelwupCXVIW7A5rUtD/MSkFqVlE3Y0d/UJ16RS",
	"8ooXrJja875e8nxJcuo2E9qRa16WFuNrzYqhzUyvbgdlCZ0sXDfaD1jQx7sZzbp27ARbA+3pL//btaOw",
	"RcHtT7Qk3LCVJrrOl4RqB9VSlgVemIh5kFLmtCQFNZRoIy1RnkvlpCWk2FPXvxEASQ4HWJDZpttSFK3R",
	"d/ex+8PWVSntyua01Cy9X3718SbBKmO5hJblxHE7K6S5KbPwA60qncGKM22oYXGbqrIthBQsIbyEH6hS",
	"dGP/1mZjJTQgy5PmdLK8lJplRu4Q3rw8BhsWiVvxju0lypF3S0ZgcvsBxVjAbGHpTFluiHEHYBGCeMFt",
	"SvicbGRNruHqlPwS+rvVWJxeEXv4cGQtKdNSwiHk7m1GArVnUpaMCkBtJ7Zn9vyGBYjS4zU2t7ICTFAE",
	"2WJKClYyWGSDhPCrNkpuYPEWFaZEVvbQZW36l0MUblj83L0rgDiDGkK8kh2LLvmKm/5yv6NrvqpXRNSr",
	"GVP2wL2wYSRRzNRKwGErRnI4s1nr5ld0wTRhVhbhqN7APJZwCWmIYjRfDlMlhGkHIVrRdaZkLYoRUrwh",
	"UsVSkq5YzuecFSSMMgRLM80ueLjYD55Gt4jA8YMMghNm2QGOYOvEsdrrab/AAUWnekJ+crwDvhp5yURg",
	"MUgsGakUu+Ky1qHTkLhip96uPwtpWFYpNufrPpBv3XZYCoFtHINbOYE2l8JQLlhheR8ALQ1DajMIUzTh",
	"vpLTjGr21RdDglPzVbFLtkkS3S4C4HKCmWBpv2Df7asIM+y41CPxEHlsjH9bcW8U3kGjDMlGQkayXx1R",
	"SZtkWv1HyLzx3GgQyG5lnMExPHsb2orOTHenB2q+yHDE3i3hi3eWF895CXz6N3s5/MnW2vKl9tl6zq35",
	"QlBTK3Z2IT6zf5GMvDVUFFQV9pcV/vRdXRr+li/sTyX+9FoueP6WL4Y2xcOaNNZAtxX+Y8dLG2fMOiw3",
	"NYX/nJqhorbhJdsoZueg+Rz+Wc8Bkehc/Y6yVzk0c8oy8VrKy7qKdzJvWepmG/LqxRCWwJDbCCEQDV1J",
	"oRmg6zlKEG/cb/YnS+uYAFIeCQGnv2kJKkgzdqVkxZThLLaM2v/+h2Lzydnkf502ltRT7KZP3YSN1meG",
	"eBjeXGoc7UKa5agZSgGrqjbI01NkIdzjXwJs3TmbY5Gz31hucIPaYDxkq8psHlmAHez6cLulW+L8yH3r",
	"iuR3uI/I1TPgzv2Rf9JObaroggtY+JRcL5kgK3ppyQEV0iyZIvYsmDaevyPdQ5YfTLpOSHCS9skkdWMS",
	"Z6pvfajNqb22cu5bkHMPccQdpWuPs06BdDz5cPK9jT0kCiwOdPZbbd0XF7/QquLF+uLi15aqxUXB1unz",
	"uNPDLuUiK6ihN8PRxQvbNYGgHzMOtf0Ih0KgwyLPHqdwvxz1UNt14Mt2Ixp7pKyJW3F7oqo1M89oSUV+",
	"EHY6c0ONPuHvuOAAxF/RxnU8Zn/MYSsPccRudw9ykdFePfoKHw83dYeDF+DWR3uoIx11kPesEcKUh9ik",
	"D4X4R4w/LMY/K2V+eaOz3HZUMOqumeX68PPKdWrWZ3JNuECzn5N8nsk1+1hVnpmFbfS1eCbXL9yUUvWv",
	"xy4NACcbgzXPXBSIBrekiFdjp/1WKakOsKNeH+vAM52smNZ0wdKOjniNvuGYRXmA4RozuwQwB/+V0dIs",
	"ny/ZHVyOaOwdV+RdYwA9wMbeKZmMbLW71h+taoeC1R52T8oWTaM/9t37eJhMa8vHE6HWme4gQVvOWO93",
	"yO+9zT826icC2FyEcsQC7ElRF8SHvrgLcSFesDkX4Fo/uxCWDp3OqOa5Pq01U06pO1lIckbckC+ooRdi",
	"Mu0yhSHHGAQNOWiqelbynFyyTeoUMJopzU/KhbTcxEhDyyhwIIpxcu7axgHQRzmcILOYIWuTuXDMTLFr",
	"qooE6Do4i2FkDLbaNuuUuLHRp+3CPd346WvQC9gZYKdlh5nqRFwTF+3AI3u+30vjvMD0miB+kVozTf65",
	"otUvXJhfSXZRP378lJHzqmqM0P9soqQs0OCGOqhFGxYO55mxtVE0g7iO5PINoxWc/pIRXa+AF5clgW7t",
	"YCwlF4quXIhIN8xrywEgHON4WbRCWNxb7PV+Ggn3/RO0n+AIoQ1ZsrIfKLbveUVa8Y2Pa4dmvSXs+eLi",
	"F4ho9icTAr4WlAvtuYLmC2EvgYtcnDGSWymAFSfk1ZwAVZu2uruUBUcxA+ngGoMNyTu7RohkIDkVEIRY",
	"FRD2xQWhYtN1oWpmjHdYv2GXbPMuCoTY06HuoqboDpZY1Ha4wBabEybXVJOVBGd6zoQpNy4QK4GaaWBq",
	"LgxGhLTC+gaIBtyaKN7OXpyYhAxELEbhZ7SqyKKUM0dpAoqeBRz1fYaJyo8WAH0AgpJUhNsRkOmNoCqx",
	"EXgRh4I291+oHe9W13Dr8m6McnOuNAT5Mep4BI2vyA0wz0Ug9kH5+5KBVCYVROK1UUr7K51C+hBgNJ1U",
	"VBme82qcVwRH/7HVxw6yi7Unmbmcd3l2j6UmWQg2zmZUp9k3s18sBtYao1PtGj2h8zOhtAwrOCEQTeSu",
	"6qyEgNWQXYJnTBVE0vplY7bFEGjpe8GUaGQqD0Z7R2LhbUm1D6qFyHBPIkaJOQPI+85uACCwvTcR9sZy",
	"K7fzluyKDu3/cCDTK1FY2sF0O8A4hCl5ttKP8/bxgJhF58OZfAyTD1yy/1psr8uS8DmpxaWQ11Y43ic0",
	"aTqxkl+dPiQpQPKzd26B24GNPfo4gB/o6NgsVD/M5yUXjGSEhz0wsAcYxC9zjrHSzf10czCrGHxGLA7a",
	"AUaPkELuCOxKyhIHJt/L+MaKxT5ACsaBxlA/NhCb6G+W1vBAwANZDwOjuUhjY+7pgpUwW8wSAIPMixlj",
	"AuOrCRdTYvW8K1paacVIFF7CIOk8hIctUduJefrRkByftj7gioCL7bUm5Hs3WU0sLHqg05LsFohncp1B",
	"FlQfVkhmqqoskDopyg3G/XcVPxjBrkfmgCE+3PSSbTDlAJJg4JaAtc/RlhkrpZUFZQ/DmoPaAfxtAT8g",
	"NNtFwBQ2a0A9FMgatNuSuLJz6gGxawjtHgIO3QKArm03RMk668FOLb8vHDRcctrEISNFThOOocvXR/E2",
	"3iTPbWBH+0ahEJX4Y1dCSpp+Wq0INpk5U0YkCae4nyVAuRSaCV1DNpiRuSxPejYfzUoGQmTWEtqyS7ZJ",
	"q4sMeNlb3y2yB5GHfG61t0eRlKjYgmvDWhlbIYi8iZHfQJZTRY1hyk70fx/+59kv59k/aPb74+zr/336",
	"6x9fvH/0We/HJ++/+eb/t396+v6bR//5H5MBBs2ySkk5H16dqdTcru+NlIEBQkcCHVvLvPcVXEnDMtAF",
	"sitaDrhtbKOXGuwUL0FtSMpmrcMmmHDIB6y8MO0l22QFL+s0vrp5//bCTvt9IJS6ngEx54IwaoklNfkS",
	"RPTW9LbNlqlLunPBr3HBr+nB1jvuNtimdmJl0aU9xydyLzq0eBs5SCBgCjn6pza4pVsIJEhVL1iJTrXh",
	"2gN4OQvb8GSbQbt3mQo/9jbdNIJimGvhSMm1tGMDh1cBXlWQebiJMhh1b0VjbQngaEF+EE1zTYOx5M5t",
	"BvHqYruBGyVtOHAfb7G8/vBjl3coNzic3j4mMZSkeggGF8cNtgO5Iit9Pw/I6iPe04C3JZJSMc1XdKXV",
	"DtKFRNNxB+NFEJf3KuvASrcLxYdDQJbQ2nDtKVwkcyVXcPP6QmuEnHzA+NFCwYbldGZ1lWz6+GKJJ2g6",
	"O52VjJZ/Y5ufbVs4VdvbC65jr0xjC/LqolddbnU0t3O7pDDfjbgT8zGafQjtoeYJ2r5bbtQ9b0ApF2nT",
	"TrkAuUMummzJGB1mzKrZbM3y2jSJsh3TbbAu36802TVTpxPcIg85FuDZLj/ARrmxdhzdj4FO3uXJ0apS",
	"8oqWmfMrDtF4Ja8cjYfm3g15z+JY+pq9+/b89Y8OfPBgMaqyoM4MrgraVZ/MqqxcItUAifXVJJbUBEtD",
	"l/87vyLXLV/kNRQh6GjMVtJyyIUEuvEzR7fX+SbnXi7f09PoXOK4xC2ucVYFz3jj0kDHeNsZTq8oL70v",
	"wUObZiq4uCYcYW++Eg9wa6d6FBuRHZRT9G53+nbsoETxDFuqDayw5oUm0lUVCHouKLfgmAAEXdGNxRu0",
	"BPdJkqhXYFrKdMnztLdJzLRFCYGBErYxgcYDarId0fLi9Fg1j8ayzfQIo1wHyGiO5Gb6wPGhvZtJF8lV",
	"C/6vmhFeMGHsJwV3sXM97W309YxurAIl3KlY9+gelSCYcB/1x1WAudXiwig3UYKsXtOf1J2aW084u9vo",
	"P40NuS//ARDblZ845qUH7otgKfVYFFwcVLTCA/YInYtn7EkZW8Le3OVzpKIW3DlcbnA6uyskekXLVQpK",
	"k4u99Ki48NCttCedzZX8naWth2B0ve5PH02MvdODj9aCOvdmQBvinWpkNziqULrptiAF7fnWQHV5Z3C2",
	"NOUzm0MavHRDYnvsFGoHXQ4Qdrh/UWgPKKje8UwFXrjnUIazpTGlr20cjXuK4zfX1sHct2vQ6xnNL9PS",
	"s4XpvAloa7nIjSS+cyjK1T6lExLFxoW2rr5VxdSKmzYbaBSzm0rCOO1oGbgReQGrYmHXlcgrtUwMU4tr",
	"KoyvUuYImuutGXqebK9rqbSBooPJVRYs5ytapkXiAnb/XUvIKviCY32xWrOoOpYbiFSSC4NYVHBdlXSD",
	"IYPN1ryak8fTiKq50yj4Fdd8VjJo8Tm2mFENwkpjuvJd7PKYMEsNzZ+MaL6sRaFYYZaucJuWJGgrYPkJ",
	"kSozZq4ZE+QxtPv8a/IQYnQ0v2KP7C46EXRy9vnXUFEM/3icJvJQJ3Ib0S2A6nqin8ZjCFLCMSz7dKOm",
	"qTAWVx6m71tuE3Ydc5egpWMJu+/Sigq6YOnI19UOmLBvE5LQ2RdRYO1DELYIN+n5maGWPmVLqpdp+QDB",
	"ILlcrbhZuZgNLVcWn5rqTDipHw7jEpDCB7j8RwiIqkjarne/NqZ0ZV67aghb+56uWHtbp4RqomsLc2Mv",
	"cwTxhLgCZQXEZkQWTdgbrPSLQXhod55HdXhrM8/+D8mXVNHckr+TIXCz2Vdf9EF+BlXcCJQNZgXONR7w",
	"e993xTRTV+mtVwNo70Ut15c8FFJkK0tRikeOyrdv5WCMVjoBwFP0bjTN9qHHylt2lGwQ3eoWutGIUt8K",
	"8cSWAW+JimE9e+Hj3iu7d8ysVRo9aG1P6Kc3r52UsZKKtQ2/M5+T05JXFDOKsyvIRUgfkh3zlmehylGn",
	"cBvoP6zb34uckVjm73JKEcA86f522J/jZQ+p2FJeXjJWcbE4ndk+KKrjqF0hfcEE01wPM9DF0mKO/WxZ",
	"XmQRgaFdgJ6+f0z3gA/4lRcMaNKrF7ug7g3s66xm0HR4Y2w7O8WPvi4rDm3bfwiOFILYd2bgv3Fth2PO",
	"LRvDrKXnLscIo37aHlhc7zUFOzkTBYp1QP6WlA+EZWrGioHINwYzvpXKcIw9YewDxLEZvmLa0FWVZrNg",
	"OMabCLfaAhq6WG1Es1yKQhPNRc4Iq6Re7kqNHkjpWwuYrOQaWU5cMTWXCktXgkxhZCdtdWxSzdYE3TaM",
	"mZLSDAEKwkecWS2lIbQ2SyZMCFpnUES8uxJMuwGNAxkKkizynaXxvugnLcvNlHDzAMdRLnyQkhVTlyUj",
	"RjFGrpdSM1IyesWaev4w2gNN3q15oaFaf8nWPJcLRaslz4lUBVP4SIRtDloQdnLzPT4hLuHQBd2/WwtY",
	"XiEZqkjxOnGZPnci+DLiFU+RgXZ/hjLrmpVXTJ+Qd9cSgdBNkra2Qkirx6w2mKxU8PmcwT2F5YDyBP2a",
	"DxFM8DIBxLWHYd2aPsBtW4sM5OMBJdKgpWItnmMj4qLH2w6iztVYocbqEapkxYKpKRpSYdv5ijVJ+VZ2",
	"k8o0Bps5w8QXS9m4MEoWdc4wFfxtCx8jsHgPpFDMO/LwAw75hyEaOL2xxdNUq5CDgPsYxSwh2yuEs2NX",
	"TGFiQjPQQyQ6EVzaUAWhERAp4ZbKikdp4lxXC0ULNs6vCUTwJ+wRUpj9CFdyvwF+tu27YlNLNmlx/DSX",
	"jmLTLZeJaXmKlg2KXm+GMsJe4osKipWYlAPF+KHttCdYzRnLNBdp6+ecMaDtNM9ZZdE5fn2MMUuoUIgF",
	"UgE5xJ632hMWhl8xTBfaIgxkOS3zusR40C2c/jqnpWq7UUo2N9IiWPxCSmMS5HauGcSjYhV7nE9ZAhj1",
	"gOIpV0xtXAvUnnzReHs5VMf330/Ly0p2xdI6DaOYnfdXeU1WVGzCWdgpGjCmUQ5PgBxlFXAs42n/5BS7",
	"CHy8TA7rtgNpj2Jgc4v4nCumuCx4Trj4jbnbHMiSxxh8fUIKw0UNj3Yo1sCNfIJAomE3mbCPAWqoXIL9",
	"0A4mF+y6ddpFJM+1Q6+1oZcMwfYpkY41jj1TxTQv6gFTpqJ5G7L9kNFd3jfUsFMVjlYfCC87FCpc8m2X",
	"rovLHbTpnFZ/lwbpVIv4jiFWNGSqEEeoE9Gorg6Lbzmg+0gjvcXJ1yEIY18xpdtxjpENkK13jG1btMbH",
	"6jRKon1h/1kyH8aiB+fbIDlucM4LX5hIDP2Zi6NI7OBA6Z4AgL7mJl9mA6kdti22wNSYjqbVnxJFCLiF",
	"bD5nuRkDA+QI4CMsg1DgZwvFC0YLyG1t0j0w0aMLysPvJbFD60iuEZqDFNqINTDKoz1K6QYM2YX8P8uR",
	"uH8l4X/gIh1xDbwg484+bfbENg55mkRqSjZMw66EqNXojlRS0zLt4fGTFqykm21TQoP2pEGw9U4u5DnU",
	"8jDLUDBKdjBd0k/t7tm2yW2T7oLD9ezfiviRh95JykQ0jK8oFxI2XG2uRKjXkEHafrAg+icKp2TWsiXe",
	"f26Zj0Dv5zjZLx5W+KML7Ac2XrrnD3EFv6YPMSo1mDzOInyP0iwxthjW7WtCUfcy38iT7hiI/Wl/BPuV",
	"2qdvr2g5kHL1hlWKaasdEUrefXv+2jmuhxKv8sE8QWpcLQRDyWD5kvfTyUB++cXFLxgbidnj4TT6Rvuh",
	"eEgMh7Sfe71vFkczVOYv2lAfXtsH6G8++4NUlLuojCbrrL+zLhNx+P5uU2ibA+4uwuX3DV6hv1K9TJfn",
	"AJeeq8kBRvh5LVBPDJEyEKXiBQU57xXmIFCZY0m//PzJ/3vy5Vf+zydffhVX4QjfrfqMX1N1OOIylYk3",
	"YZfwGQtYEf+4Tn+bB6t5FrMshGGnXteaTlw1zrgE4c7cC66zFV8okAXSow5XEY2M5IlcVpRBE+88On4/",
	"LKR2MKS18A7EDXiNhcPPnMKmXrH3xEFpvqpKjH1wQ/XKV+yV79mEaN59xO+hwyXvPOCR3djvfvg4x5vC",
	"sruqxPboxh/Ec7mqSjbMuSqMWsHnTlGghZJE0cOW3gIq87xWjWm8G7/4My05vrimoSyRkLKCOkSV4cL+",
	"B1InZW3w/4wq+x8sktf+H2JVRCftUBM4F6hm4QfymRETK0kXqMe7vikqesP061E+nT5XTFDErTkZLWkE",
	"TqZET1STZ2JvJXxZwJc4nYUgIBBDpf1fmhTMMLWyKuVSXpNVnS8hg4MumE/oAIYG/ozORK3RfYxrOzHJ",
	"xQToiuY4EMYNllQtmCIulI+4tx4Cg1xR3nnKshutAxYmmpIUdqWZ9J9wBbkuSjZJZLN4MC7Z5hTFFvj9",
	"BoRjOGdlADDIXLlDkG6VABPnUO3A18uWxIcVL1tpZwH8A0p+Fj531/aU/PrZYWOXB+uA61Br1l/neB9w",
	"vLcJUtGsbaza0t/cYW3DzMZoG2nZ2HYHdQc3BMpJEgCV/PPzfxLF5u4F7c8+gwk++2zqmv7zSfuzRbzP",
	"PksbRu5L0QnlkPCFzeG70K6p3n1fHAga1P3yD4DncrWSAuy/ZdlxvouCQDiihhfBBWHiipWyYsnWuMHR",
	"oUPamWKLuqTodOZCMNXqNCafQPOFYIVZCwxUegt/vluLVNuY1UPraDtSNbejhw1uVoy+U1wVszlyyJu4",
	"6YhN5kUzIkZo32bElxgeHkaEoeZM3WbMd26MEXWOF0Jhmi3mR3AfLQhCGp5w59FfH0Ho6x/7PIgQWMH+",
	"VdPSBY4ICNN4B7kA+SUTWNq41qGgPWFC18rFaVhYYTwLihtGxgxeN01uWuQ421Y4VIEPK7jHXHQo5LVg",
	"Vyt6FPZw5PZacrY9F4tsSwpcDjlwrqHPcQbD89YatnZwi4RqxYqRtS1iNzXkefr+A8M3Rdya10XSGZDR",
	"o+OiXwmGPHz14hHh3fdF4lzT6A3p3cuO68iNgwhDjnuwdDNe94FizthQbEAnnIrM2YCbaVe1svlVU6gM",
	"WnX9OTuhHBkf+leqofKYa+7iWD7SoNAWkO4B6f5QcYb+3tWsppOFknU6hnCBVSO6xmurGIDQhZFtaJA7",
	"ffLlV6TgC6bNCfk7pPAh8+2Xg22fJuFNmdlWNWsCgIW0cJSHXPhSNOfSHWgvTI27MCYY5v5P+CZFVKYT",
	"kEsys06FWr7qySykcjFfkNEc0ZuWD+0QAZZcGEWR+GZyPk9m+f8AvzemJOVpsmL9Ux9BlfGJ9htKBX/D",
	"993fTyc7ygaWV6Fi4M0IT8mGaoWX68T1efoka27QCXltexMm5lJZTXtVGysDsDVk+6GtsyWlQgqcad5N",
	"gOw38TtTEgwJgkiRsx4P5NFmQ8gWzUGe1y7u0MIQ0vlDcsjDtyDNTBHIR6in9q8aqYXhKP7Ybfw52sXK",
	"Mh4L9N+XvExgQSXtdx3DMSVCEnwRKG6JAbZNKifC7NInWoh0v9c8LmlSpO1kFhMKLA/VVAJrrBT5korm",
	"iZPddaP6OLnPU/Rt2t+95oesb7UFzg9b4ErIgVgz4ap4WgUFkiqDRe1+Aa7oZsWEuSHl+xF7YxgblPhX",
	"2zUANaAB+N67Hky4ZJvMyPTY9mNI6g+qFthOkdpGa5wO6D0hYMc/DtPIrniDrIgwryEUOooe97ZTp9IF",
	"G/wl2xDlTQNxwWRUm26gZSFbNDzl+X/HV6zRS1CQS4lAfBRLRPUyrddiHgyS7AdblhOG2Y4VegArsO92",
	"nAinsAfavg19INo+G7akbSrWjuppvQfRDmMHHf+EvAjpBeBrwUDbJucA7U9djwwm6YeaCVx5OxVV3uYM",
	"TpuLi18qDHJKXFzXAGUZ26Yv1bgmNJ8vwqtSCcONb7aeM9W0SxlPfMu5+r1p2Lfb+Gb9B8lalKdxKVV0",
	"M/Fi2WQ6sQDbfyxA9t+5+n0Cb3CVfVdS+g65Y85ggkTI6qStOLZkuXAZGmzZYYTcWoXXBeLNsfp/YGz7",
	"WghjuzbWHWl+eE7L8t1a4EyJUBmke0MuRyxs7VKsApG0lNR5Hb3hyF3Q2EFC89xKWUUTwh3B+UCTbvk0",
	"DOzuF1BrMfE9iWTizbiAblQtBtcNNqO+JMhzQtWiXqFN/+7Xt2MFg0WDeeGyO/uVb53UhDe9VqwgUrm8",
	"Lj53SXtDpZtGlrPEt/ZeywXPG+msiSofwPSp1T9Y5YqoSJHlwSFuWZVV8owkF+hIvpickFeYA6IYLZBm",
	"Km5YqrBia/2QkH7N4EEJj9FZON2obO6JvUWtwpUaMFsxeFIvUUr1Uy3VSStdD5zYEFVCwaZ9SB/ghJ7b",
	"mZonEvCQciqENJ/QOe1ZqrPzqGgU/lFVoWZnyYR/2xZFXxh2wEwqFeMLse0hwDn1jEB3jyvJDtpUyuWe",
	"xgeve1wiSMQ3I6Lg/MDB8L0vWmTwiE6CusZ5xh3yGvZi62uAIfNYNyFD2q0yKnI1bomezPwYrRAQG7Tm",
	"Hw+7vhtUVr11OdXOAC2qsatvKy5q57vs7aF3SWaRo3GrZIYVl/ClKKBPimWef3qKJQosxlQ3YVYX4pz8",
	"zpR0+mIYyl6IxjztKnK4ZPmTRKdQOU33unWn3LMyHS5+i3Q4WPHx4uKXNe1JGQDTLeSLmxXv3HnGLwcq",
	"g8Vn7L1VrhTYLUv+4YxbNnboreuLi1/mtCg6RZLi0CskMqHID+62K5EGyEKvB6qRbT3N+dbT3DJ+K6Pq",
	"2it8W94j9Aoi5q5d+x3HHqlw1OHQyqZ0ZH/qMZc/+O9HoYZXem+LHH7WLeixpaArXYFOdh5qdTvgZIDv",
	"hDgS4nzd/nflTSnlPLx759xj3oHbeRDyHPnailYHLRe7k3hEEA+7/dmg07/JU/RPFbrxohIsMEATXdB9",
	"dvJ279v60dMnCF+72Wk0rs/UPHWt2ApSKxsVM3E4rq5jEAubgpsYSAFxD3FouI5miPeakFd2ZFpe0432",
	"ptIGsYaH87uKhZwSZro49xrtu+m9UTk4xt6wnFccXu9uU8GA48MGxoHX09FQaYkOJoXyq2C0cLHhtKmU",
	"2nZ+ed+Xq/lIIwY9ddtMy7a1AAf2xmDb5rkf268oHGnEz3YnQqTq5oYt3UHznHdyK7FzlsJ9aRz2QiKH",
	"0wxTN9F932vALSJsI3to31F12eKBVLdfLsYkiNaoLREjSl24wYuDzpnwY/OkGoRiB9P+z0yhA/MNFYVc",
	"kZc+Benhz29ePiKK6bo0Hsl8NRKLfA6Sj/QxwkrN3crfdp4g9JHo6NNYcG1Uwm758T5QOO8/UJh4ps+u",
	"7lBPE14WH+hpwrL3NOHNVzr+UUJ/Y4aeJPwoEWiHJuEdnNupp/PF7Es+XTekn26mm4mHKB02yQtRXQ97",
	"nr4MXYfx30rIar32Tg25ttKHjp9/TgR1NkW9RYjNjPwIO4M+2+MNvEDk5CyYBGqRJh4J1+7xec9bGsnI",
	"PSCHxcjLSPiZ16LQnS1sHsXZ4gHdKvs40ce32epMHRIKxkoCb2NXaRsScEW6VJDwyH333SsoEI2loH8Q",
	"5cal0naruzVbWSl5xYvUczSlXPBcowVmX5/ta9/3/XSyqkvDbzjOd74vOpHT7JAvHCsUBVUFYcWTL7/8",
	"/OtmuR8ZuepvUjLAxi3LGRmp4Xlbjg2rG0HE/FGeLGSfZA362tSicT0E31qqxsN4FxkAkl5vtFgfojHb",
	"EBqhurRie2l489PU/raketmQzuhZAngughJHr7pxd5D182HePYsuRXar0IjO9RgiHM0l+RjuRudZQJ6P",
	"JonfRZSkX7XfLRHNrhZffCok7HVVMivbNTSwf29ytamMPPVHgyzfz/mW91/3icdL7zo0gDLE0koiWMrB",
	"CpONxAUGggaqG8Tn9vbnbQxXqjrqUjFtIUrH0yzVxcWvaWFzqGqAlS7Tnd7vebZvO3va3nHct0EJt7pE",
	"IO5ZZ9uOA/cPUn/P30PI9hyksVwKQ3PTFKeZnDuD2cSVYZ8sjan02enp9fX1ibemneRydbqAtJPMyDpf",
	"nvqB8IGyOBHcdXEFTC0VLjeG55qc//gKZCZuSgYR7AVbg9UuYNbkycljrB/ABK345Gzy9OTxyee4Y0tA",
	"glOs1TE5++P9dHJ69eQ0DpVZJN+bY1TlS1QEXNsTyIVnqN28KkKjl1Kd++Gc2wNf3D77ZehtLXtl7d//",
	"qpnaTPzjFrEZqHHG9a/H7ixnNFNoDME0tcK8ccVI7oW4yNOML0KyKyYIR7Gv5Cse3rRRVql1XDsBM7Td",
	"E+Cm0h1dsAjeE/KTZlE5WXkJSSAobvqQcl8NNXQaAMwOkYKrQfl+ii/umhN1IcKPCm95X0DaEzhNRBQ6",
	"etIq1ehMte5tG1eyI9+QWpRWvvDuB/Aa6rA0qOKJ1Sxy6nbA5Vv5uFU9fAJ+ksxBmFkI9zwR9+AB6EbA",
	"TFykLVi5nOrkcHwayo/EcQPT5q1AZ6ifklDQo2Nhnjq/v38KvP/CNkYVDC3YBQFntCxTy4x8Td1lfrt2",
	"y2ywH1er63wJESpdQHtvf8OzOK5cQPPuFe7N1PWPogZ8slyIFggtRWsDR/Sx28HWVSkLNjmb01Kz9PYw",
	"XGRra4KA4AMxce9cYEQnTVBjDKbOouiASSvF0bYQUqQLfnRlB202QLotP5vse+tK90LZR3rl7BS3um8+",
	"CjNysbtnyWC9UA7ZXsJLthkCpklWHqZ2O2Mrt38eAt/zGR/Z0DwyhVVlodZ8xRQMKXJwrmigFt5yiTjv",
	"g2sKrumshHdX0CzRiswYJAihFPYeJxCXnhlmyN2YlC0z/ApvJUERMLhpTx4/9rKTMzVGo53+plEobgYc",
	"juXdJzkndQF9odGtic+hRjz6wPBcr1FmWFW1GY4TWJsMOHV/5J+0I5IVXXDhomvAgLeil2CnE5im5YLb",
	"/O30ee6W/QfPjBMYHMaMsKM1Mll7A35NyrptyB9CkMsju8AvbnWOg9XfhquwddbhG44B+41DQAzQxepx",
	"76eTLz/1JVikpgsNxftA5p78+r4jyZ/+4aNLefF+UKx/LeVlXQX7cPzAUE+6x7buXj3bAJHYKt0Hq7On",
	"uUBSrBISUZQA5CTeI6NqtpesOpYCH5BiHmXEo4x4PzLinbDSPRjoHTLMNJM68qjJF4+/OLLZj4fNlsD8",
	"drDZ0x4F2MV3RRTz1qWjskJyW26c/z2kiWDZki3c+byqIDMeglv0x8SnD65m/FnZ8tHIeSMj54FZaee+",
	"76GeNrM0N/WorEbJL52NPUoER4ngU5QIQqrdB5EDvGry8fD/O/H4HXn+keffG88PN3oco48fYzjyd8/f",
	"gxHlyNSPTP1TY+qJ4rb7sXhvrUwbM2/F8p/j0OcxaEf9/ygLHGWBu9H/WwRgX9X/KBAkql0cxYKjWPBp",
	"iwX76/xBIOj4Qg8iChyNAEfGf2T8H9wIcGT2R+3/yOY/fTYf54WODaxr11x513qHSzFHtllBBLu2l81I",
	"IkvLjHZw+HigXQz+yDcOkxUTPQ5kZ5nztaPOviBOLjsPSwppGBa6HoQCSlDAYHsHrWMy8VDMevj6R3Ji",
	"X+c5nvQAtalT28YX7zaV3YcSAvZ+s7vlMbBuSiSEeE1ffTzkBkJlcM0XJAuZ6vaXFf4E2Y9v+cL+VOJP",
	"kHeNWaeptWu+GF68hm4r/MeON2qR7tZHC2mnnM82TmpPn0Va5P0og179lNQQq5XMMRMsnnrFRbZ1+tDg",
	"ICDM2Fy61JcIBrreAYNvsG+2xJ1qMH5l0ZoW3FJew1fshHznCA0V5M3L5+Tp06dfE7zwVqNBdBlaMA6J",
	"LyvEwAWCUVATPo8hP29ePgcA3oZY1lGtdh5qwKhDrRxG/PgW/idOsvxTZrp9yKQIXLUzPThtEp+a2S6e",
	"hAdptloqDqth/0k04+mkq07c/m25jobU3snOhMfkr38rhXWMQzou5dD2ugxVc9jDl3z3/t2XoECg/tCq",
	"1B8uHUoMoV5rU2gsSdCx2c0E76Op+WgyOPqY/4w+5n/rFOJon07/aBPr3anE0XNdQ8bLpkk6jTglEndZ",
	"xk6x+E/nKbwzsrMnsbm/bNFbuo+OvpdPRJTtEaHTmVwPEqK/gPhntf+WLArXcCbXxN6rqRNfdKcWZ2gA",
	"rZ3N4Zn7rXkA1Rn2F5KWGVULfNn2AYzBxeIM+j3Aai8ciEjtxA9syIU5+/zJ0y9cE0Wv4Ql4PXVgAFDk",
	"qy8ACNv1weyrLx54bwOF0tr2p7Pzb75xY1SKC0NnJXOGhd6c2qizJStL6To4sZj1GtoPZ//13/84OTl5",
	"MIaCy7Ul4lQU39MVu39aft4cGRd3cCLtdve16Um5E/d3rD0obY/8yw/nr6kaNFeGz7dlJtv4xTO5TlEI",
	"e82iAiRHF/+RzRyOzeh6taJqY1GcGSAZEaq5yDq0G3QE2BvzJ6b35VANU4KHrQPXgeLjtC04aqmsUFqy",
	"Nc/lQtFqyXNa4ot5u804zwC8e6fVR3vCx2VPGH5jt+LFuvOCNeGiYOu0yh/QfZRx4plcv3BTSrXTfN3D",
	"QJxsDDF4Fl+h9nU7cpcjd7lL7oJoN4Kv7GV8OS3lQu9hgSG2/Qgh/rVc6A9jijmyhMNEpX3gyKM/aRgQ",
	"vA8T/Om9J8SxZK179Ge7GwpbZc37n3dTufbjFyXu1DVRykXmOcb+ZXoWL2zXhDvlU/B4IKm+hcV0m61u",
	"e8JT7HCGltuUlFHJSkf/65E57sGtWiED7jn7+wsW2D27HX2H1e+g89WCm6H57LfJ/WfzHdOzjulZR9X0",
	"Pp38cMinf/jrudux755R310h3DYcr03GTz0fXfp36tIHMjeWFt5j0WeY8khujsa8jzsioUsxT2e0pCJn",
	"Oy1yKHprA2Zo/8LN9VICQXH16oHAbKWofrKjbnTUjY6PvB3zj8bmHx1M6DqsNBITz1Fa2ndc8GM1zRTX",
	"mzWs4aiy/ZkEkH1KUbTcE2CLdfRpWz0KrEJhWSpWptiq8x2rURyrURyrURyrURyrUdyzG/pYN+JYN+Ko",
	"t/17140YE2rivJcWUCkYxg23GiPfHxQ/7jr6pLeo53I144I1mo9fQfMSspH2oKDRkprAh31DI4kO4QU7",
	"1pUpWQ7wV4i+AW04Z/wK/jtXjP3OMkOVlarH8NvWajyA8GZlNH/8aOVea7PSMFraiK/Xgbgs7D6X5YaY",
	"UESWUOJXMrUC8kbW5BouS8kvob978NJu+opYJO48QG0kMaoe9Eq77hnAs7MyyPQ+PD/HIifHIifHIid/",
	"AjPIrJT5pT79A446QwPCTu81dBqyXjyzH3dZLPAy4nTpsk0xQPdrWd2abQGLO+ZCf8IYP8rMF0VZjq02",
	"27XueQk4LYlxDRJuVw4Omtd+dWxDxOfRani0Gh6thker4dFqeKxhe7RFHm2RR1vk0RZ5tEUebZF3Z4v8",
	"kPbDu38Q82ihPFooj/aaD5pbEx/t6R9WJ9qdXUOs+li2OOSQuTLGujEpNk4pG19I/hMiIdF27XVZx1/O",
	"YyLKkbx8LObg99OJZurK3/ValZOzydKYSp+dnrI1XVUlO8nl6hQqPbj+fwS5X65WwKjCL27k6BdHyt7/",
	"+v5/AgAA//+qeRSZAGABAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
